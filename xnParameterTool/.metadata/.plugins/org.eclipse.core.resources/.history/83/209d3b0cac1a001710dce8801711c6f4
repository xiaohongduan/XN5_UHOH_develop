package de.uhoh.for1695;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;
import java.util.StringTokenizer;
import java.util.ArrayList;
import java.io.File;

import de.uhoh.for1695.MySQLConnection;

class	XnDatabaseConnection {
	
	String newLine = System.getProperty("line.separator"); //System independent hard return
	//String newLine = "\r\n"; //CT 100408 to make windows line breaks although being in Linux
	String space = " ";
	String var_txt_general_MCK001_xnd_line_six ="------------------------------------------------------------------------------------------------------------------";
	String tab = "\t";
	private MySQLConnection myConnection;
	
	
	
	
	public XnDatabaseConnection ( String host, String dbName , String userName, String password) {
		
		myConnection = new MySQLConnection(host, dbName, userName, password);
	}
	public boolean isValid() {
		
		return myConnection.isValid();
	}
	public Exception getLastError() {
		
		return myConnection.getLastError();
	}
	
	
	public boolean checkAuthorName (String currentAuthor) {
		boolean ok = false;
		try {
			String s = "SELECT author_surname FROM info_authors WHERE author_id = '" + currentAuthor +"'";
			ResultSet rs = myConnection.query(s);
			
			if (rs.first())
			{
				ok = true;
			}
		}
		catch (Exception e) 
		{
			  e.printStackTrace();
		}
		return ok;
	}
	
	//IMPORTING FROM XN3
	
	public boolean importCropManagementFromXndFile (String xndFileName,  
			int cropManagementId, boolean overwrite ) {
		boolean ok = false;
		try {
		
			BufferedReader xndIn = new BufferedReader(new InputStreamReader(new DataInputStream(new FileInputStream(xndFileName))));

			//Create an entry in the table, to be updated later on
			cropInfo ret = parse_and_upload_xnd_planting_section (xndIn, cropManagementId, overwrite) ; 
			if (ret == null){
				xndIn.close();
				return false;
			}
			String crop_code = ret.crop_code;
			String variety = ret.variety;
			int sowYear = ret.sowYear;
			
			List<String> fieldList; 
			fieldList = Arrays.asList("date", "fertilizer", "code", "n_tot_min", "no3n", "nh4n", "urea");					
			if(!parse_and_upload_xnd_management_section( xndIn,  crop_code,  variety,  cropManagementId, 
					 "10006", "crop_management_mineral_fertilization", fieldList,sowYear ) ){
				xndIn.close();
				return false;
			}
			
			fieldList = Arrays.asList("date", "fertilizer", "code", "dry_matter", "n_tot_org", "nh4n", "org_subst");					
			if(!parse_and_upload_xnd_management_section( xndIn,  crop_code,  variety,  cropManagementId, 
					 "10007", "crop_management_organic_fertilization", fieldList,sowYear ) ){
				xndIn.close();
				return false;
			}
			fieldList = Arrays.asList("date", "depth", "equipment", "code");					
			if(!parse_and_upload_xnd_management_section( xndIn,  crop_code,  variety,  cropManagementId, 
					 "10008", "crop_management_tillage", fieldList,sowYear ) ){
				xndIn.close();
				return false;
			}
			fieldList = Arrays.asList("date", "amount", "code");					
			if(!parse_and_upload_xnd_management_section( xndIn,  crop_code,  variety,  cropManagementId, 
					 "10009", "crop_management_irrigation", fieldList,sowYear ) ){
				xndIn.close();
				return false;
			}
			
			xndIn.close();
			ok = true;
		}
		catch (Exception e) 
		{
			  e.printStackTrace();
			  return false;
		}
		return ok;
	}
	
	
	
	
	public boolean importSoilParameterizationsFromXnmXndFiles (String xnmFileName, String xndFileName,  
			int soilParamId, String profileID, boolean overwrite ) {
		boolean ok = false;
		try {
			
			BufferedReader xnmIn = new BufferedReader(new InputStreamReader(new DataInputStream(new FileInputStream(xnmFileName))));
			
			//Create an entry in the table, to be updated later on
			if (overwrite)
			{
				String sqlstring = "DELETE FROM  soil_parameterization  " 
						+ " WHERE soil_param_id = " + soilParamId
						+ " AND profileID =  '" + profileID + "'"
						+";";;
				//System.out.println( sqlstring);
				myConnection.updateDb(sqlstring);
			}

			
			List<String> fieldList;
			fieldList = Arrays.asList("soil_type", "wilting_point", "field_capacity", "porosity", "cond_sat"
					);
			if(! parse_and_upload_soil_param_xnm_table_section (xnmIn, profileID, soilParamId,  "10020", fieldList, true) ) {
				xnmIn.close();
				return false;
			}

			fieldList = Arrays.asList("res_water_cont", "cont_sat", "camp_a", "camp_b", "van_gen_a", "van_gen_n", "van_gen_m"
					);
			if(! parse_and_upload_soil_param_xnm_table_section (xnmIn, profileID, soilParamId,  "10021", fieldList, false)){
				xnmIn.close();
				return false;
			}

			xnmIn.close();
			
			BufferedReader xndIn = new BufferedReader(new InputStreamReader(new DataInputStream(new FileInputStream(xndFileName))));

			fieldList = Arrays.asList("clay", "silt", "sand", "organic_matter", "bulk_density", "rock_fraction", "ph"
					);
			if( ! parse_and_upload_soil_param_xnd_table_section (xndIn, profileID, soilParamId,  fieldList, false) ) {
				xndIn.close();
				return false;
			}
			xndIn.close();
			ok = true;
		}
		catch (Exception e) 
		{
			  e.printStackTrace();
			  return false;
		}
		return ok;
	}
	public boolean importSoilInitializationsFromXnmXndFiles (String xnmFileName, String xndFileName,  
			int soilInitId, String profileID, boolean overwrite ) {
		boolean ok = false;
		try {
			
			BufferedReader xnmIn = new BufferedReader(new InputStreamReader(new DataInputStream(new FileInputStream(xnmFileName))));


			//Create an entry in the table, to be updated later on
			if (overwrite)
			{
				String sqlstring = "DELETE FROM  soil_initialization  " 
						+ " WHERE soilinit_param_id = " + soilInitId
						+ " AND profileID =  '" + profileID + "'"
						+";";;
				//System.out.println( sqlstring);
				myConnection.updateDb(sqlstring);
			}

			
			List<String> fieldList;
			fieldList = Arrays.asList("c_litter", "n_litter", "c_manure", "n_manure", "c_humus", "n_humus"
					);
			if (!parse_and_upload_soil_init_xnm_table_section (xnmIn, profileID, soilInitId,  "20003", fieldList, true)) {
					xnmIn.close();
					return false;
			}
			xnmIn.close();
		
			BufferedReader xndIn = new BufferedReader(new InputStreamReader(new DataInputStream(new FileInputStream(xndFileName))));

			fieldList = Arrays.asList("water_content", "matrix_potential", "soil_temperature", "nh4_content", "no3_content", "root_density"
					);
			if(! parse_and_upload_soil_init_xnd_table_section (xndIn, profileID, soilInitId,  "10011", fieldList, false)) {
				xndIn.close();
				return false;
			}
			xndIn.close();
			ok = true;
		}
		catch (Exception e) 
		{
			  e.printStackTrace();
			  return false;
		}
		return ok;
	}
	public boolean importDaisyParametersFromXnmFile (String xnmFileName,  
			int daisyParamId, String profileID, boolean overwrite ) {
		boolean ok = false;
		try {
		
			BufferedReader xnmIn = new BufferedReader(new InputStreamReader(new DataInputStream(new FileInputStream(xnmFileName))));

			//Create an entry in the table, to be updated later on
			if (overwrite)
			{
				String sqlstring = "DELETE FROM  daisy_parameterization  " 
						+ " WHERE daisy_param_id = " + daisyParamId
						+ " AND profileID =  '" + profileID + "'"
						+";";;
				//System.out.println( sqlstring);
				if (!myConnection.updateDb(sqlstring)){
						xnmIn.close();
						return false;
				}
				sqlstring = "DELETE FROM  daisy_parameterization_layers  "
						+ " WHERE daisy_param_id = " + daisyParamId
						+ " AND profileID =  '" + profileID + "'"
						+";";;
				//System.out.println( sqlstring);
				if (!myConnection.updateDb(sqlstring)){
						xnmIn.close();
						return false;
				}

			}
			String sqlstring = "INSERT INTO daisy_parameterization  " 
					+ " (daisy_param_id, profileID) VALUES (" + daisyParamId + ", '" +  profileID + "')"
					+";";
			//System.out.println( sqlstring);
			if (!myConnection.updateDb(sqlstring)){
				xnmIn.close();
				return false;
			}

			List<String> fieldList;
			fieldList = Arrays.asList("layer","effic","humf","min_cn", "temp0", "miner_q10", "theta0", "theta1", "MinerSatActiv", "NitrifNO3NH4Ratio"
					);
			if (! parse_and_upload_xnm_daisy_section (xnmIn, profileID, daisyParamId,  "20001", fieldList) ) {
				xnmIn.close();
				return false;
			}
			

			fieldList = Arrays.asList("fom_slow", "fom_fast", "fom_veryfast", "micbioms_slow", "micbioms_fast", "humus_slow", "humus_fast"
					);
			if (! parse_and_upload_xnm_daisy_table_section (xnmIn, profileID, daisyParamId,  "20007", fieldList)) { 
				xnmIn.close();
				return false;
			}
			
			
			fieldList = Arrays.asList("iTempCorr", "AOM1Q10","AOM2Q10","BOM1Q10","BOM2Q10","SOM1Q10"
					,"SOM2Q10", "DBOM1Q10","DBOM2Q10",  "MBOM1Q10", "MBOM2Q10"
					);
			if (! parse_and_upload_xnm_daisy_section (xnmIn, profileID, daisyParamId,  "20021", fieldList, 1) ) { 
				xnmIn.close();
				return false;
			}
			
			fieldList = Arrays.asList("fBOM1",	    "fSOM1",	   "fSOM2",	   "fEFF"
					);
			if (! parse_and_upload_xnm_daisy_section (xnmIn, profileID, daisyParamId,  "20022", fieldList) ) {
				xnmIn.close();
				return false;
			}
			
			
			fieldList = Arrays.asList("fEFFAOM1","fEFFAOM2","fEFFBOM1",	"fEFFBOM2",	"fEFFSOM1",	"fEFFSOM2"
					);
			if (! parse_and_upload_xnm_daisy_section (xnmIn, profileID, daisyParamId,  "20023", fieldList) ) {
				xnmIn.close();
				return false;
			}
			

			
			xnmIn.close();
			ok = true;
		}
		catch (Exception e) 
		{
			  e.printStackTrace();
			  return false;
		}
		return ok;
	}
	public boolean importDaisyPoolsFromXnmFile (String xnmFileName,  int sompoolsParamId, String profileID, boolean overwrite ) {
		boolean ok = false;
		try {
		
			BufferedReader xnmIn = new BufferedReader(new InputStreamReader(new DataInputStream(new FileInputStream(xnmFileName))));

			//Create an entry in the table, to be updated later on
			if (overwrite)
			{
				String sqlstring = "DELETE FROM  sompools_initialization " 
						+ " WHERE sompools_param_id = " + sompoolsParamId
						+ " AND profileID =  '" + profileID + "'"
						+";";;
				//System.out.println( sqlstring);
				if (!myConnection.updateDb(sqlstring)){
						xnmIn.close();
						return false;
				}
				

			}


			List<String> fieldList;
			fieldList = Arrays.asList("AOM1_C", "AOM2_C", "AOM3_C",  "BOM1_C",
					"BOM2_C", "BOMD_C", "SOM0_C", "SOM1_C", "SOM2_C", "Csol"
					);
			if (! parse_and_upload_xnm_sompools_table_section (xnmIn, profileID, sompoolsParamId,  "20008", fieldList, true)) { 
				xnmIn.close();
				return false;
			}

			fieldList = Arrays.asList(
					"AOM1_N", "AOM2_N", "AOM3_N", "BOM1_N", "BOM2_N", "BOMD_N","SOM0_N", 
					"SOM1_N", "SOM2_N"
					);
			if (! parse_and_upload_xnm_sompools_table_section (xnmIn, profileID, sompoolsParamId,  "20009", fieldList, false)) { 
				xnmIn.close();
				return false;
			}
		
			xnmIn.close();
			ok = true;
		}
		catch (Exception e) 
		{
			  e.printStackTrace();
			  return false;
		}
		return ok;
	}
	
	//IMPORT LOOPS:
	
	public void loop_importCropManagementFromECs () {
	
		String infolder = "/home/troost/Dropbox/SFAL/RegionalXN/xnd/";
		
		for (int s = 1; s<= 6; ++s) {
			for (int y = 2009; y <= 2016; ++y) {
				
				String xndFileName = infolder + "EC" + String.valueOf(s) + "_"+ String.valueOf(y) + ".xnd";
				File f = new File(xndFileName);
				if (f.exists() ) {
					int cropManagementId = addIdCode(idTypes.management, "EC" + String.valueOf(s) + "_"+ String.valueOf(y), "", "poyda");
					importCropManagementFromXndFile ( xndFileName,  cropManagementId, true ); 
				}
				
				xndFileName = infolder + "EC" + String.valueOf(s) + "_"+ String.valueOf(y) + "a.xnd";
				f = new File(xndFileName);
				if (f.exists() ) {
					int cropManagementId = addIdCode(idTypes.management, "EC" + String.valueOf(s) + "_"+ String.valueOf(y)+"a", "", "poyda");
					importCropManagementFromXndFile ( xndFileName,  cropManagementId, true ); 
				}
			}
		}
	}
	
	
	public cropInfo	parse_and_upload_xnd_planting_section (BufferedReader xndIn, int cropManagementId, boolean overwrite)  {
			String marker = "10005";
			List<String> fieldList = Arrays.asList("sow_depth", "row_dist", "sow_dens", "sow_date", "emerg_date", "harvest_date", "max_biom_date","max_ro_date", "max_root_depth", "biom_remove");
			cropInfo ret = null;
			int sowYear = 0;
			try {
				String inLine;
				//find header
				boolean found = false; 
				while ((inLine = xndIn.readLine()) != null) {
					//System.out.println(inLine);
					if (inLine.matches("^\\s*"+marker+"\\b.*") ) {
						//System.out.println("Found results 10011");
						//parsedString.append(rfsLine + newLine);
						found = true;
						break;					 
					}
				}
				if(!found)
					return ret;
				
				int i = 0;

				
				StringTokenizer st = new StringTokenizer(inLine, " \t");
				st.nextToken();//skip marker
				
				int numcrops = Integer.valueOf(st.nextToken());
				if(numcrops > 1) 	{						
					System.out.println("Error: Crop management importing not defined from xnd files containing more than one crop");
					return ret;
				}
			
				if ((inLine = xndIn.readLine()) == null) {
					return ret;
				}
				
				
				st = new StringTokenizer(inLine, " \t");
				st.nextToken();//skip crop id
				String crop_code = st.nextToken();
				/*if(!file_crop_code.equals(crop_code)) 	{						
					System.out.println("Error in crop management importing: Crop code '"+file_crop_code+"' in file 'does not match specified crop code:" +crop_code);
					return false;
				}*/
				String variety = st.nextToken(); //discard variety, no check here, since variety change could be o.k (e.g. to reflect KRG and MSA differences)
				
				
				
				if (overwrite)
				{
					String sqlstring = "DELETE FROM  crop_management_planting  " 
							+ " WHERE crop_management_id = " + cropManagementId
							+ " AND crop_code =  '" + crop_code + "'"
							+ " AND variety =  '" + variety + "'"
							+";";;
					//System.out.println( sqlstring);
					if (!myConnection.updateDb(sqlstring)){
						xndIn.close();
							return ret;
					}
					sqlstring = "DELETE FROM  crop_management_irrigation  " 
							+ " WHERE crop_management_id = " + cropManagementId
							+ " AND crop_code =  '" + crop_code + "'"
							+ " AND variety =  '" + variety + "'"
							+";";;
					//System.out.println( sqlstring);
					if (!myConnection.updateDb(sqlstring)){
						xndIn.close();
							return ret;
					}
					sqlstring = "DELETE FROM  crop_management_tillage  " 
							+ " WHERE crop_management_id = " + cropManagementId
							+ " AND crop_code =  '" + crop_code + "'"
							+ " AND variety =  '" + variety + "'"
							+";";;
					//System.out.println( sqlstring);
					if (!myConnection.updateDb(sqlstring)){
						xndIn.close();
							return ret;
					}
					sqlstring = "DELETE FROM  crop_management_mineral_fertilization  " 
							+ " WHERE crop_management_id = " + cropManagementId
							+ " AND crop_code =  '" + crop_code + "'"
							+ " AND variety =  '" + variety + "'"
							+";";;
					//System.out.println( sqlstring);
					if (!myConnection.updateDb(sqlstring)){
						xndIn.close();
							return ret;
					}
					sqlstring = "DELETE FROM  crop_management_organic_fertilization  " 
							+ " WHERE crop_management_id = " + cropManagementId
							+ " AND crop_code =  '" + crop_code + "'"
							+ " AND variety =  '" + variety + "'"
							+";";;
					//System.out.println( sqlstring);
					if (!myConnection.updateDb(sqlstring)){
							xndIn.close();
							return ret;
					}

				}
				String sqlstring = "INSERT INTO crop_management_planting  " 
						+ " (crop_management_id, crop_code, variety) VALUES (" + cropManagementId + ", '" +  crop_code + "', '" +  variety +"')"
						+";";
				//System.out.println( sqlstring);
				if (!myConnection.updateDb(sqlstring)){
					xndIn.close();
					return ret;
				}
				sqlstring = "UPDATE crop_management_planting  " 
						+ " SET " ;				
				
				
					for (; i < fieldList.size(); ++i )
					{
						try {
							String temp = st.nextToken();
							if (i > 0)
							{	
								sqlstring	+= ",";
							}
							if (fieldList.get(i).equals("sow_date") && ! temp.equals("-99")) {
								String day = temp.substring(0,2);
								String month = temp.substring(2,4);
								String yearRead = temp.substring(4,6);
								sowYear = Integer.valueOf(yearRead);
								
								sqlstring += " sow_date_year = 0,";
								sqlstring += " sow_date =  '" + month+"-"+day+"'";
							}
							else if (fieldList.get(i).matches(".*date.*") && ! temp.equals("-99")) {
								String day = temp.substring(0,2);
								String month = temp.substring(2,4);
								String yearRead = temp.substring(4,6);
								int relYear = Integer.valueOf(yearRead) - sowYear;

								
								sqlstring += " " + fieldList.get(i) + " = '" + month+"-"+day+"',";
								sqlstring += " " + fieldList.get(i) + "_year = "+relYear;
							}
							else {
								sqlstring += " " + fieldList.get(i) + " = " + temp;
							}
						}
						catch (Exception ex)
						{
							System.out.println("Error in crop management importing: Missing entry for " + fieldList.get(i));
							return ret;
						}
					}

					sqlstring += " WHERE crop_management_id = " + cropManagementId
						+ " AND crop_code =  '" + crop_code + "'"
						+ " AND variety =  '" + variety + "'"
						+";";
					System.out.println( sqlstring);
					if (!myConnection.updateDb(sqlstring)){
						return ret;
					}



				ret = new cropInfo(crop_code, variety, sowYear);
			}
			catch (Exception e) 
			{
				System.out.println("Error in parse_and_upload_xnd_planting_section:" + marker);
				e.printStackTrace();
				
			}
			return ret;
	}
	
	public boolean	parse_and_upload_xnd_management_section( BufferedReader xndIn, String crop_code, String variety, int cropManagementId, 
			 String marker, String dbTable, List<String> fieldList , int sowYear) {
			boolean ok = false;
			try {
				String inLine;
				//find header
				boolean found = false;
				while ((inLine = xndIn.readLine()) != null) {
					if (inLine.matches("^\\s*"+marker+"\\b.*") ) {
						//System.out.println("Found results 10011");
						//parsedString.append(rfsLine + newLine);
						found = true;
						break;					 
					}
				}
				if (!found)
					return false;
				
				xndIn.mark(2000);

				String sqlstringStart = "INSERT INTO " + dbTable 
						+ " SET  crop_management_id  = " + cropManagementId + ", " +
								"crop_code = '" + crop_code + "', " +
								"variety = '" + variety + "' ";
						
				int cc = 0;
				while ((inLine = xndIn.readLine()) != null) {
					//System.out.println( rfsLine);
					
					if (inLine.matches("^\\s*[\\d+-.].*") ) {

						xndIn.mark(2000);
						StringTokenizer st = new StringTokenizer(inLine, " \t");
						cc++;	
						
						String sqlstring = sqlstringStart;
						sqlstring += ", event_id = " + cc;

						
						int i = 0;
						for (; i < fieldList.size(); ++i )
						{
							try {
								String temp = st.nextToken();
								if (fieldList.get(i).matches(".*date.*") && ! temp.equals("-99")) {
									String day = temp.substring(0,2);
									String month = temp.substring(2,4);
									String yearRead = temp.substring(4,6);
									int relYear = Integer.valueOf(yearRead) - sowYear;

									
									sqlstring += ", " + fieldList.get(i) + " = '" + month+"-"+day+"'";
									sqlstring += ", " + fieldList.get(i) + "_year = "+relYear;
								}
								else if(isNumeric(temp) ) {
									sqlstring += ", " + fieldList.get(i) + " = " + temp;
								}
								else {
									sqlstring += ", " + fieldList.get(i) + " = '" + temp +"'";
								}
							}
							catch (Exception ex)
							{
								break; //exit from for list
							}
						}
						
						if (i != fieldList.size() )
						{	
							System.err.println("Error: Missing column in .xnd table " + marker);
							return false;
						}
						sqlstring += " ;";
						System.out.println( sqlstring);
						if(!myConnection.updateDb(sqlstring) ) {
							return false;
						}
						//if end of layers not reached read next line
					}
					else {
						//System.out.println("no match "+rfsLine);
						xndIn.reset();
						break;
					}

				}
				
				ok = true;
			}
			catch (Exception e) 
			{
				System.out.println("Error in parse_and_upload_xnd_management_section:" + marker);
				e.printStackTrace();
				
			}
			return ok;
	}
	
	
	public boolean	parse_and_upload_xnm_daisy_section( BufferedReader xnmIn, String profileID, int daisyParamId, 
			 String marker, List<String> fieldList  ) {
		return parse_and_upload_xnm_daisy_section(  xnmIn,  profileID,  daisyParamId, 
				  marker,  fieldList, 0 );
	}
	public boolean	parse_and_upload_xnm_daisy_section( BufferedReader xnmIn, String profileID, int daisyParamId, 
			 String marker, List<String> fieldList, int valuesOnMarkerLine ) {
			boolean ok = false;
			try {
				String inLine;
				//find header
				boolean found = false; 
				while ((inLine = xnmIn.readLine()) != null) {
					//System.out.println(inLine);
					if (inLine.matches("^\\s*"+marker+"\\b.*") ) {
						//System.out.println("Found results 10011");
						//parsedString.append(rfsLine + newLine);
						found = true;
						break;					 
					}
				}
				if(!found)
					return false;
				
				xnmIn.mark(2000);

				int i = 0;
				String sqlstring = "UPDATE daisy_parameterization  " 
						+ " SET " ;
				if (valuesOnMarkerLine > 0) {
					StringTokenizer st0 = new StringTokenizer(inLine, " \t");
					st0.nextToken();
					for (; i < valuesOnMarkerLine; ++i) {
						try {
							String temp = st0.nextToken();
							if (i > 0)
							{	
								sqlstring	+= ",";
							}
							sqlstring += " " + fieldList.get(i) + " = " + temp;
						}
						catch (Exception ex)
						{
							System.out.println("Error: Missing value on marker line!");
							return false; //exit from for list
						}
						
						
					}
				}
				while ((inLine = xnmIn.readLine()) != null) {
					//System.out.println( rfsLine);
					if (inLine.matches("^\\s*[\\d+-.].*") ) {

						xnmIn.mark(2000);
						StringTokenizer st = new StringTokenizer(inLine, " \t");

						for (; i < fieldList.size(); ++i )
						{
							try {
								String temp = st.nextToken();
								if (i > 0)
								{	
									sqlstring	+= ",";
								}
								sqlstring += " " + fieldList.get(i) + " = " + temp;
							}
							catch (Exception ex)
							{
								break; //exit from for list
							}
						}

						if (i == fieldList.size() )
						{	sqlstring += " WHERE daisy_param_id = " + daisyParamId
							+ " AND profileID =  '" + profileID + "'"
							+";";
							System.out.println( sqlstring);
							if (!myConnection.updateDb(sqlstring)){
								return false;
							}
							break;
						}
						//if end of fieldList not reached read next line
					}
					else {
						//System.out.println("no match "+rfsLine);
						xnmIn.reset();
						break;
					}

				}

				ok = true;
			}
			catch (Exception e) 
			{
				System.out.println("Error in parse_and_upload_xnm_daisy_section:" + marker);
				e.printStackTrace();
				
			}
			return ok;
	}
	public boolean	parse_and_upload_xnm_daisy_table_section( BufferedReader xnmIn, String profileID, int daisyParamId, 
			 String marker, List<String> fieldList ) {
			boolean ok = false;
			try {
				String inLine;
				//find header
				boolean found = false;
				while ((inLine = xnmIn.readLine()) != null) {
					if (inLine.matches("^\\s*"+marker+"\\b.*") ) {
						//System.out.println("Found results 10011");
						//parsedString.append(rfsLine + newLine);
						found = true;
						break;					 
					}
				}
				if (!found)
					return false;
				
				xnmIn.mark(2000);

				String sqlstringStart = "INSERT INTO daisy_parameterization_layers  " 
						+ " SET  daisy_param_id  = " + daisyParamId + ", " +
								"profileID = '" + profileID + "' ";
						
				
				while ((inLine = xnmIn.readLine()) != null) {
					//System.out.println( rfsLine);
					if (inLine.matches("^\\s*[\\d+-.].*") ) {

						xnmIn.mark(2000);
						StringTokenizer st = new StringTokenizer(inLine, " \t");
						
						String layerTemp = st.nextToken();
						int layerID = Integer.valueOf(layerTemp);
						
						String sqlstring = sqlstringStart;
						sqlstring += ", first_layer = "+ layerID
									 + ", layers = 1";

						
						int i = 0;
						for (; i < fieldList.size(); ++i )
						{
							try {
								String temp = st.nextToken();
								
								sqlstring += ", " + fieldList.get(i) + " = " + temp;
							}
							catch (Exception ex)
							{
								break; //exit from for list
							}
						}
						
						if (i != fieldList.size() )
						{	
							System.err.println("Error: Missing column in .xnm table " + marker);
							return false;
						}
						sqlstring += " ;";
						System.out.println( sqlstring);
						if(!myConnection.updateDb(sqlstring) ) {
							return false;
						}
						//if end of layers not reached read next line
					}
					else {
						//System.out.println("no match "+rfsLine);
						xnmIn.reset();
						break;
					}

				}
				
				ok = true;
			}
			catch (Exception e) 
			{
				System.out.println("Error in parse_and_upload_xnm_daisy_section:" + marker);
				e.printStackTrace();
				
			}
			return ok;
	}
	public boolean	parse_and_upload_soil_param_xnm_table_section( BufferedReader xIn, String profileID, int soilParamId, 
			 String marker, List<String> fieldList, boolean newRecord ) {
			boolean ok = false;
			try {
				String inLine;
				//find header
				boolean found = false;
				while ((inLine = xIn.readLine()) != null) {
					if (inLine.matches("^\\s*"+marker+"\\b.*") ) {
						//System.out.println("Found results 10011");
						//parsedString.append(rfsLine + newLine);
						found = true;
						break;					 
					}
				}
				if (!found)
					return false;
				
				xIn.mark(2000);

				String sqlstringStart;
				if(newRecord) {
				 sqlstringStart = "INSERT INTO soil_parameterization  " 
						+ " SET  soil_param_id  = " + soilParamId + ", " +
								"profileID = '" + profileID + "' ,";
				}
				else {
					sqlstringStart = "UPDATE soil_parameterization SET " ;
				}
				
				while ((inLine = xIn.readLine()) != null) {
					//System.out.println( rfsLine);
					if (inLine.matches("^\\s*[\\d+-.].*") ) {

						xIn.mark(2000);
						StringTokenizer st = new StringTokenizer(inLine, " \t");
						
						String layerTemp = st.nextToken();
						int layerID = Integer.valueOf(layerTemp);
						
						String sqlstring = sqlstringStart;
						if (newRecord) {
							sqlstring += " first_layer = "+ layerID
									 + ", layers = 1,";
						}
						
						int i = 0;
						for (; i < fieldList.size(); ++i )
						{
							try {
								String temp = st.nextToken();
								
								if(i != 0 )
								{
										sqlstring += ", ";
								}
								if(isNumeric(temp) ) {
									sqlstring +=  fieldList.get(i) + " = " + temp;
								}
								else {
									sqlstring +=  fieldList.get(i) + " = '" + temp +"'";
								}
								
							}
							catch (Exception ex)
							{
								break; //exit from for list
							}
						}
						
						if (i != fieldList.size() )
						{	
							System.err.println("Error: Missing column in table " + marker);
							return false;
						}
						if(newRecord) {
							sqlstring += " ;";
						}
						else {
							 sqlstring += " WHERE  soil_param_id  = " + soilParamId + " AND " +
											"profileID = '" + profileID + "'  AND first_layer = "+ layerID +";";
						}
						
						System.out.println( sqlstring);
						if(!myConnection.updateDb(sqlstring) ) {
							return false;
						}
						//if end of layers not reached read next line
					}
					else {
						//System.out.println("no match "+rfsLine);
						xIn.reset();
						break;
					}

				}
				
				ok = true;
			}
			catch (Exception e) 
			{
				System.out.println("Error in parse_and_upload_soil_init_xnm_table_section: " + marker);
				e.printStackTrace();
				
			}
			return ok;
	}
	
	
	public boolean	parse_and_upload_soil_init_xnm_table_section( BufferedReader xIn, String profileID, int soilInitId, 
			 String marker, List<String> fieldList, boolean newRecord ) {
			boolean ok = false;
			try {
				String inLine;
				//find header
				boolean found = false;
				while ((inLine = xIn.readLine()) != null) {
					if (inLine.matches("^\\s*"+marker+"\\b.*") ) {
						//System.out.println("Found results 10011");
						//parsedString.append(rfsLine + newLine);
						found = true;
						break;					 
					}
				}
				if (!found)
					return false;
				
				xIn.mark(2000);

				String sqlstringStart;
				if(newRecord) {
				 sqlstringStart = "INSERT INTO soil_initialization  " 
						+ " SET  soilinit_param_id  = " + soilInitId + ", " +
								"profileID = '" + profileID + "' ,";
				}
				else {
					sqlstringStart = "UPDATE soil_initialization SET " ;
				}
				
				while ((inLine = xIn.readLine()) != null) {
					//System.out.println( rfsLine);
					if (inLine.matches("^\\s*[\\d+-.].*") ) {

						xIn.mark(2000);
						StringTokenizer st = new StringTokenizer(inLine, " \t");
						
						String layerTemp = st.nextToken();
						int layerID = Integer.valueOf(layerTemp);
						
						String sqlstring = sqlstringStart;
						if (newRecord) {
							sqlstring += " first_layer = "+ layerID
									 + ", layers = 1,";
						}
						
						int i = 0;
						for (; i < fieldList.size(); ++i )
						{
							try {
								String temp = st.nextToken();
								
								if(i == 0 )
								{
									sqlstring +=  fieldList.get(i) + " = " + temp;
								}
								else {
									sqlstring += ", " + fieldList.get(i) + " = " + temp;
								}
								
							}
							catch (Exception ex)
							{
								break; //exit from for list
							}
						}
						
						if (i != fieldList.size() )
						{	
							System.err.println("Error: Missing column in table " + marker);
							return false;
						}
						if(newRecord) {
							sqlstring += " ;";
						}
						else {
							 sqlstring = " WHERE  soilinit_param_id  = " + soilInitId + " AND " +
											"profileID = '" + profileID + "'  AND first_layer = "+ layerID +";";
						}
						
						System.out.println( sqlstring);
						if(!myConnection.updateDb(sqlstring) ) {
							return false;
						}
						//if end of layers not reached read next line
					}
					else {
						//System.out.println("no match "+rfsLine);
						xIn.reset();
						break;
					}

				}
				
				ok = true;
			}
			catch (Exception e) 
			{
				System.out.println("Error in parse_and_upload_soil_init_xnm_table_section: " + marker);
				e.printStackTrace();
				
			}
			return ok;
	}
	public boolean	parse_and_upload_soil_init_xnd_table_section( BufferedReader xIn, String profileID, int soilInitId, 
			 String marker, List<String> fieldList, boolean newRecord ) {
			boolean ok = false;
			try {
				String inLine;
				//find header
				boolean found = false;
				while ((inLine = xIn.readLine()) != null) {
					if (inLine.matches("^\\s*"+marker+"\\b.*") ) {
						//System.out.println("Found results 10011");
						//parsedString.append(rfsLine + newLine);
						found = true;
						break;					 
					}
				}
				if (!found)
					return false;
				
				xIn.mark(2000);

				String sqlstringStart;
				if(newRecord) {
				 sqlstringStart = "INSERT INTO soil_initialization  " 
						+ " SET  soilinit_param_id  = " + soilInitId + ", " +
								"profileID = '" + profileID + "' ,";
				}
				else {
					sqlstringStart = "UPDATE soil_initialization SET " ;
				}
				int lastLayer = 0;
				while ((inLine = xIn.readLine()) != null) {
					//System.out.println( rfsLine);
					if (inLine.matches("^\\s*[\\d+-.].*") ) {

						xIn.mark(2000);
						StringTokenizer st = new StringTokenizer(inLine, " \t");
						
						String layerTemp = st.nextToken();
						int layerID = Integer.valueOf(layerTemp);
						layerTemp = st.nextToken();
						int numLayers = Integer.valueOf(layerTemp);
						
						String sqlstring = sqlstringStart;

						
						int i = 0;
						for (; i < fieldList.size(); ++i )
						{
							try {
								String temp = st.nextToken();
								
								if (fieldList.get(i).equals("nh4_content") 
										|| fieldList.get(i).equals("no3_content"))
								{
									temp =  String.valueOf(Double.valueOf(temp)/numLayers);
								}
								
								if(i == 0 )
								{
									sqlstring +=  fieldList.get(i) + " = " + temp;
								}
								else {
									sqlstring += ", " + fieldList.get(i) + " = " + temp;
								}
								
							}
							catch (Exception ex)
							{
								
								break; //exit from for list
							}
						}
						
						if (i != fieldList.size() )
						{	
							System.err.println("Error: Missing column in table " + marker);
							return false;
						}
						
						for (int j = lastLayer + 1 ; j <= lastLayer + numLayers; ++j) {
							String sqlstringFull = sqlstring;
							if(newRecord) {
								sqlstringFull += " first_layer = "+ j
										 + ", layers = 1 ;";
							} 
							else {
								 sqlstringFull += " WHERE  soilinit_param_id  = " + soilInitId + " AND " +
												"profileID = '" + profileID + "'  AND first_layer = "+ j +";";
							}
							System.out.println( sqlstringFull);
							if(!myConnection.updateDb(sqlstringFull) ) {
								return false;
							}
						}
						lastLayer = lastLayer + numLayers;
				
						//if end of layers not reached read next line
					}
					else {
						//System.out.println("no match "+rfsLine);
						xIn.reset();
						break;
					}

				}
				
				ok = true;
			}
			catch (Exception e) 
			{
				System.out.println("Error in parse_and_upload_soil_init_xnd_table_section: " + marker);
				e.printStackTrace();
				
			}
			return ok;
	}
	public boolean	parse_and_upload_soil_param_xnd_table_section( BufferedReader xIn, String profileID, int soilParamId, 
			  List<String> fieldList, boolean newRecord ) {
			String marker = "10010"; 
			boolean ok = false;
			try {
				String inLine;
				//find header
				boolean found = false;
				while ((inLine = xIn.readLine()) != null) {
					if (inLine.matches("^\\s*"+marker+"\\b.*") ) {
						//System.out.println("Found results 10011");
						//parsedString.append(rfsLine + newLine);
						found = true;
						break;					 
					}
				}
				if (!found)
					return false;
				
				xIn.mark(2000);

				String sqlstringStart;
				if(newRecord) {
				 sqlstringStart = "INSERT INTO soil_parameterization  " 
						+ " SET  soil_param_id  = " + soilParamId + ", " +
								"profileID = '" + profileID + "' ,";
				}
				else {
					sqlstringStart = "UPDATE soil_parameterization SET " ;
				}
				
				StringTokenizer st0 = new StringTokenizer(inLine, " \t");
				st0.nextToken(); //discard marker
				st0.nextToken(); //discard number of layers
				int depth_per_layer = Integer.valueOf(st0.nextToken());
				sqlstringStart += " depth_per_layer = " + depth_per_layer + ", ";
				
				int lastLayer = 0;
				while ((inLine = xIn.readLine()) != null) {
					//System.out.println( rfsLine);
					if (inLine.matches("^\\s*[\\d+-.].*") ) {

						xIn.mark(2000);
						StringTokenizer st = new StringTokenizer(inLine, " \t");
						
						String layerTemp = st.nextToken();
						int layerID = Integer.valueOf(layerTemp);
						layerTemp = st.nextToken();
						int numLayers = Integer.valueOf(layerTemp);
						
						String sqlstring = sqlstringStart + " horizon_id = " + layerID + ", ";

						
						int i = 0;
						for (; i < fieldList.size(); ++i )
						{
							try {
								String temp = st.nextToken();
								
								if(i != 0 )
								{
									sqlstring += ", ";
								}
								if(isNumeric(temp) ) {
									sqlstring +=  fieldList.get(i) + " = " + temp;
								}
								else {
									sqlstring +=  fieldList.get(i) + " = '" + temp +"'";
								}
								
							}
							catch (Exception ex)
							{
								break; //exit from for list
							}
						}
						
						if (i != fieldList.size() )
						{	
							System.err.println("Error: Missing column in table " + marker);
							return false;
						}
						
						for (int j = lastLayer + 1 ; j <= lastLayer + numLayers; ++j) {
							String sqlstringFull = sqlstring;
							if(newRecord) {
								sqlstringFull += " first_layer = "+ j
										 + ", layers = 1 ;";
							} 
							
							else {
								 sqlstringFull += " WHERE  soil_param_id  = " + soilParamId + " AND " +
												"profileID = '" + profileID + "'  AND first_layer = "+ j +";";
							}
							System.out.println( sqlstringFull);
							if(!myConnection.updateDb(sqlstringFull) ) {
								return false;
							}
						}
						lastLayer = lastLayer + numLayers;
				
						//if end of layers not reached read next line
					}
					else {
						//System.out.println("no match "+rfsLine);
						xIn.reset();
						break;
					}

				}
				
				ok = true;
			}
			catch (Exception e) 
			{
				System.out.println("Error in parse_and_upload_soil_param_xnd_table_section: " + marker);
				e.printStackTrace();
				
			}
			return ok;
	}
	public boolean	parse_and_upload_xnm_sompools_table_section( BufferedReader xIn, String profileID, int sompoolInitId, 
			 String marker, List<String> fieldList, boolean newRecord ) {
			boolean ok = false;
			try {
				String inLine;
				//find header
				boolean found = false;
				while ((inLine = xIn.readLine()) != null) {
					if (inLine.matches("^\\s*"+marker+"\\b.*") ) {
						//System.out.println("Found results 10011");
						//parsedString.append(rfsLine + newLine);
						found = true;
						break;					 
					}
				}
				if (!found)
					return false;
				
				xIn.mark(2000);

				String sqlstringStart;
				if(newRecord) {
				 sqlstringStart = "INSERT INTO sompools_initialization  " 
						+ " SET  sompools_param_id  = " + sompoolInitId + ", " +
								"profileID = '" + profileID + "' ,";
				}
				else {
					sqlstringStart = "UPDATE sompools_initialization SET " ;
				}
				
				while ((inLine = xIn.readLine()) != null) {
					//System.out.println( rfsLine);
					if (inLine.matches("^\\s*[\\d+-.].*") ) {

						xIn.mark(2000);
						StringTokenizer st = new StringTokenizer(inLine, " \t");
						
						String layerTemp = st.nextToken();
						int layerID = Integer.valueOf(layerTemp);
						
						String sqlstring = sqlstringStart;
						if (newRecord) {
							sqlstring += " first_layer = "+ layerID
									 + ", layers = 1,";
						}
						
						int i = 0;
						for (; i < fieldList.size(); ++i )
						{
							try {
								String temp = st.nextToken();
								
								if(i == 0 )
								{
									sqlstring +=  fieldList.get(i) + " = " + temp;
								}
								else {
									sqlstring += ", " + fieldList.get(i) + " = " + temp;
								}
								
							}
							catch (Exception ex)
							{
								break; //exit from for list
							}
						}
						
						if (i != fieldList.size() )
						{	
							System.err.println("Error: Missing column in table " + marker);
							return false;
						}
						if(newRecord) {
							sqlstring += " ;";
						}
						else {
							 sqlstring += " WHERE  sompools_param_id  = " + sompoolInitId + " AND " +
											"profileID = '" + profileID + "'  AND first_layer = "+ layerID +";";
						}
						
						System.out.println( sqlstring);
						if(!myConnection.updateDb(sqlstring) ) {
							return false;
						}
						//if end of layers not reached read next line
					}
					else {
						//System.out.println("no match "+rfsLine);
						xIn.reset();
						break;
					}

				}
				
				ok = true;
			}
			catch (Exception e) 
			{
				System.out.println("Error in parse_and_upload_xnm_sompools_table_section: " + marker);
				e.printStackTrace();
				
			}
			return ok;
	}
	
	
	public boolean importGecrosParametersFromXnmFile (String xnmFileName,  
			int plantParamId, String crop_code, String variety, String ecotype, String daylength, String leafangle, boolean overwrite ) {
		boolean ok = false;
		try {
		
			BufferedReader xnmIn = new BufferedReader(new InputStreamReader(new DataInputStream(new FileInputStream(xnmFileName))));

			//Create an entry in the table, to be updated later on
			if (overwrite)
			{
				String sqlstring = "DELETE FROM  plant_parameterization_gecros  " 
						+ " WHERE plant_param_id = " + plantParamId
						+ " AND crop_code =  '" + crop_code + "' AND variety = '" + variety +"'"
						+";";;
				//System.out.println( sqlstring);
				myConnection.updateDb(sqlstring);
			}
			
			String sqlstring = "INSERT INTO plant_parameterization_gecros  " 
					+ " (plant_param_id, crop_code,  variety, ECOTYPE, DAYLENGTH, LEAFANGLE) VALUES (" + plantParamId + ", '" +  crop_code + "', '" + variety + "', '" + ecotype + "', '" + daylength + "', '" + leafangle + "')"
					+";";
			//System.out.println( sqlstring);
			myConnection.updateDb(sqlstring);
			
			
			List<String> fieldList = Arrays.asList("LEGUME", "C3C4", "DETER", "SLP", "LODGE", "VERN");
			parse_and_upload_xnm_gecros_section (xnmIn, crop_code, plantParamId, variety, "80001", fieldList); 

			fieldList = Arrays.asList("YGV", "CFV",	"EG", "FFAT","FLIG", "FOAC","FMIN");
			parse_and_upload_xnm_gecros_section (xnmIn, crop_code, plantParamId, variety, "80002", fieldList); 
			
			fieldList = Arrays.asList("LWIDTH",	"CDMHT", "RDMX", "TBD", "TOD", "TCD", "TSEN");
			parse_and_upload_xnm_gecros_section (xnmIn, crop_code, plantParamId, variety, "80003", fieldList);
			
			fieldList = Arrays.asList("NUPTX","RNCMIN",	"STEMNC","SLNMIN", "LNCI", "SLA0", "CCFIX");
			parse_and_upload_xnm_gecros_section (xnmIn, crop_code, plantParamId, variety, "80004", fieldList);
	
			fieldList = Arrays.asList("INSP", "SPSP", "EPSP",	"EAJMAX",	   "XVN",	    "XJN",	    "THETA");
			parse_and_upload_xnm_gecros_section (xnmIn, crop_code, plantParamId, variety, "80005", fieldList);

			fieldList = Arrays.asList("SEEDW", "SEEDNC", "BLD", "HTMX", "MTDV", "MTDR", "PSEN");
			parse_and_upload_xnm_gecros_section (xnmIn, crop_code, plantParamId, variety, "80006", fieldList);
			
			fieldList = Arrays.asList("PMEH",	   "PMES",		      "ESDI",			"WRB");
			parse_and_upload_xnm_gecros_section (xnmIn, crop_code, plantParamId, variety, "80007", fieldList);
			
			fieldList = Arrays.asList("CO2A","COEFR", "COEFT", "COEFV",	"FCRSH", "FNRSH", "PNPRE", "CB", "CX", "TM");
			parse_and_upload_xnm_gecros_section (xnmIn, crop_code, plantParamId, variety, "80008", fieldList);
			
			
			xnmIn.close();
			ok = true;
		}
		catch (Exception e) 
		{
			  e.printStackTrace();
			  return false;
		}
		return ok;
	}
	/*public boolean	parse_and_upload_xnm_section_80001( BufferedReader xnmIn, int cropId, int plantParamId, String variety ) 
	{
		boolean ok = false;
		try {
			String inLine;
			//find header
			while ((inLine = xnmIn.readLine()) != null) {
					if (inLine.matches("^\\s*80001") ) {
						//System.out.println("Found results 10011");
						//parsedString.append(rfsLine + newLine);  
						break;					 
					}
			}
			xnmIn.mark(2000);
			while ((inLine = xnmIn.readLine()) != null) {
				//System.out.println( rfsLine);
				if (inLine.matches("^\\s*[\\d+-].*") ) {

					xnmIn.mark(2000);
					StringTokenizer st = new StringTokenizer(inLine, "\t");
					
					String sqlstring = "UPDATE plant_parameterization_gecros  " 
							+ " SET " 
							+ " LEGUME = " + st.nextToken() + ","
							+ " C3C4 = " + st.nextToken() + ","
							+ " DETER = " + st.nextToken() + ","
							+ " SLP = " + st.nextToken() + ","
							+ " LODGE = " + st.nextToken() + ","
							+ " VERN = " + st.nextToken() 
							+ " WHERE plant_param_id = " + plantParamId
							+ " AND crop_id =  " + cropId + " AND variety = '" + variety + "'"
							+";";
					System.out.println( sqlstring);
					myConnection.updateDb(sqlstring);
					break;
				}
				else {
					//System.out.println("no match "+rfsLine);
					xnmIn.reset();
					break;
				}
				
			}
		
			
			ok = true;
		}
		catch (Exception e) 
		{
			System.out.println("Error in parse_and_upload_xnm_section_80001");
			e.printStackTrace();
			System.exit(0);
		}
		return ok;
	}
	*/
	public boolean	parse_and_upload_xnm_gecros_section( BufferedReader xnmIn, String crop_code, int plantParamId, 
													String variety, String marker, List<String> fieldList ) 
	{
		boolean ok = false;
		try {
			String inLine;
			//find header
			while ((inLine = xnmIn.readLine()) != null) {
					if (inLine.matches("^\\s*"+marker) ) {
						//System.out.println("Found results 10011");
						//parsedString.append(rfsLine + newLine);  
						break;					 
					}
			}
			xnmIn.mark(2000);
			
			int i = 0;
			String sqlstring = "UPDATE plant_parameterization_gecros  " 
					+ " SET " ;
			while ((inLine = xnmIn.readLine()) != null) {
				//System.out.println( rfsLine);
				if (inLine.matches("^\\s*[\\d+-.].*") ) {

					xnmIn.mark(2000);
					StringTokenizer st = new StringTokenizer(inLine, " \t");
					

					
					for (; i < fieldList.size(); ++i )
					{
						try {
							String temp = st.nextToken();
							if (i > 0)
							{	
								sqlstring	+= ",";
							}
							sqlstring += " " + fieldList.get(i) + " = " + temp;
						}
						catch (Exception ex)
						{
							break; //exit from for list
						}
					}
					
					if (i == fieldList.size() )
					{	sqlstring += " WHERE plant_param_id = " + plantParamId
						+ " AND crop_code =  '" + crop_code + "' AND variety = '" + variety + "'"
						+";";
						System.out.println( sqlstring);
						myConnection.updateDb(sqlstring);
						break;
					}
					//if end of fieldList not reach read next line
				}
				else {
					//System.out.println("no match "+rfsLine);
					xnmIn.reset();
					break;
				}
				
			}
		
			
			ok = true;
		}
		catch (Exception e) 
		{
			System.out.println("Error in parse_and_upload_xnm_gecros_section:" + marker);
			e.printStackTrace();
			System.exit(0);
		}
		return ok;
	}
	
	String getXn3ContentUntilMarker (BufferedReader inR, String marker) {
		
		StringBuilder parsedString = new StringBuilder();
		
		try {

			String rfsLine;
			//find header
			inR.mark(2000);
			while ((rfsLine = inR.readLine()) != null) {
				if (rfsLine.matches("^\\s*" + marker+".*") ) {
					inR.reset();
					break;					 
				}
				parsedString.append(rfsLine + newLine);
				inR.mark(2000);
			}
		}
		catch (Exception ex2) {
			System.out.println("Error in asciiFileMaker_updateFromRFS");
			ex2.printStackTrace();
			System.exit(0);
		}
		
		return parsedString.toString();
	}
	String getXn3ContentUntilEOF(BufferedReader inR) {
		StringBuilder parsedString = new StringBuilder();
		
		try {

			String rfsLine;

			while ((rfsLine = inR.readLine()) != null) {

				parsedString.append(rfsLine + newLine);

			}
		}
		catch (Exception ex2) {
			System.out.println("Error in asciiFileMaker_updateFromRFS");
			ex2.printStackTrace();
			System.exit(0);
		}
		
		return parsedString.toString();
	}
	public String firstLetterToLowerCase(String input) {
		char c[] = input.toCharArray();
		c[0] = Character.toLowerCase(c[0]);
		return new String(c);
	}
	
	public boolean writeXn5XpnFile(String xn5FilePrefix, int projectId, String projectName) {
		boolean ok = false;
		try {
			String s0 = "SELECT startYear, endYear, startMonth, startDay, endMonth, endDay, plotSize " 
					+ " FROM simulation_projects_general "
					+ " WHERE simulation_project_id = "+ projectId + ";";
			ResultSet projectInfo = myConnection.query(s0);	
	
			if (! projectInfo.first()) {
				throw new Exception("Error: Missing general information on simulation project.");
			}
		
			ResultSet freeText = getXpnContentForProject(projectId);
			
			if (! freeText.first()) {
				throw new Exception("Error: Missing xpn content for simulation project.");
			}
			
			String s1 = "SELECT xn5_cell_x, xn5_cell_y "
						+" FROM simulation_projects_xn5_cells t1"
						+" WHERE simulation_project_id = " + projectId
						+" ORDER BY xn5_cell_x, xn5_cell_y;";
			ResultSet cellList = myConnection.query(s1);	
			
			if (! cellList.first()) {
				throw new Exception("Error: No map cells/plots defined for simulation project.");
			}	
			cellList.beforeFirst();
			
			int startYear = projectInfo.getInt("startYear");
			int startMonth = projectInfo.getInt("startMonth");
			int startDay = projectInfo.getInt("startDay");
			int endYear = projectInfo.getInt("endYear");
			int endMonth = projectInfo.getInt("endMonth");
			int endDay = projectInfo.getInt("endDay");
			
			String xn5FileNameXpn = xn5FilePrefix + ".xpn" ;		
			PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(xn5FileNameXpn)));
			
			out.println("[model]");			
			String grid = "grid = ";
			while (cellList.next())
			{
				int curGrid = 0;
				int curX = cellList.getInt("xn5_cell_x");
				int curY = cellList.getInt("xn5_cell_y");
				int active = 1;
				String mosaicShare = "100.0";
				String xn5FileNameCfg = projectName + "_" + curGrid + "_" + curX + "_" + curY + "_0.xpi" ;
				
				grid += active+","+curGrid + "," + curX + "," + curY+",$PROJECT_PATH/"+xn5FileNameCfg+","+mosaicShare+";"; 
				
			}
			out.println(grid);
			out.println("");	
			
			out.println("[options]");					
			out.println("simulation start = "+startYear+"-"+ String.format("%02d", startMonth)+"-"+String.format("%02d", startDay));
			out.println("simulation end = "+endYear+"-"+String.format("%02d", endMonth)+"-"+String.format("%02d", endDay));
			out.println("");	
			
			
	    	ResultSet gecrosCrops = getGecrosParameterizationSelectionOnly(projectId);
	    	List<String> gecrosInis = new ArrayList<String>();
			if (gecrosCrops.first()) {
				gecrosCrops.beforeFirst();
		    	while(gecrosCrops.next())
		    	{
		    		String crop_code = gecrosCrops.getString("crop_code");
		    		String variety = gecrosCrops.getString("variety");
		    		String crop_name = gecrosCrops.getString("crop_name");
					String cropline = crop_name + "_"+ variety +"_gecros = $<$PROJECT_PATH/$PROJECT_NAME__" + crop_name.toLowerCase() + "_"+ firstLetterToLowerCase(variety) + "_gecros.ini$>";
		    		gecrosInis.add(cropline);
		    	}
			}	
			
			for (int i = 0; i< gecrosInis.size(); ++i)
			{
				out.println(gecrosInis.get(i));
			}
			out.println("");
			
			
			
			out.println("");
			out.println(freeText.getString("xpnText"));
			
			out.close();
			ok = true;
			
		}
		catch (Exception e) 
		{
			  e.printStackTrace();
		}
		return ok;
	}
	public boolean writeXn5XpiFiles(String xn5FilePrefix, int projectId, String projectName) {
		boolean ok = false;
		try {
			int numGrids = 1;
			boolean gecros = true;
			boolean ceres = false;


			
			String s1 = "SELECT xn5_cell_x, xn5_cell_y, climate_file "
						+" FROM simulation_projects_xn5_cells t1"
						+" WHERE simulation_project_id = " + projectId
						+" ORDER BY xn5_cell_x, xn5_cell_y;";
			ResultSet cellList = myConnection.query(s1);	
			
			if (! cellList.first()) {
				throw new Exception("Error: No map cells/plots defined for simulation project.");
			}	
			


			for (int curGrid = 0; curGrid < numGrids; ++curGrid)
			{
				cellList.beforeFirst();
				while (cellList.next())
				{
	
					ResultSet freeText = getXpiContentForProject(projectId, curGrid);
					
					if (! freeText.first()) {
						throw new Exception("Error: Missing xpi content for grid " + curGrid +".");
					}
					
					int curX = cellList.getInt("xn5_cell_x");
					int curY = cellList.getInt("xn5_cell_y");
					String climfile = cellList.getString("climate_file");

	
					String xn5FileNameXpn = xn5FilePrefix + "_" + curGrid + "_" + curX + "_" + curY + "_0.xpi" ;		
					PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(xn5FileNameXpn)));
					
					out.println("");
					out.println(freeText.getString("xpiText"));
					
					out.println("");
					out.println("[Expert N Standard Read INI]");
					out.println("climate file = " + climfile);
					
					
					if (gecros) {
						out.println("");
						out.println("[plant]");
						out.println("potential transpiration = Penman Monteith");
						out.println("phenological development = GECROS Development");
						out.println("biomass growth = GECROS BiomassGrowth");
						out.println("canopy gross photosynthesis = GECROS Gross Photosynthesis");
						out.println("canopy formation = GECROS Canopy Formation");
						out.println("root length growth = GECROS Root System Formation");
						out.println("crop senescence = GECROS Crop Senescence");
						out.println("nitrogen demand = GECROS Nitrogen Demand");
						out.println("nitrogen uptake = GECROS Nitrogen Uptake");
						out.println("actual transpiration = GECROS Actual Transpiration");						
						out.println("");
						
						out.println("[GECROS Development]");
						out.println("");

						out.println("[gecros]");
						out.println("filename = $<$PROJECT_PATH/$PROJECT_NAME_$REG_STR_crop_rotation.ini$>");
						out.println("");
						
						out.println("[GECROS BiomassGrowth]");
						out.println("");

						out.println("[GECROS Nitrogen Demand]");
						out.println("");

						out.println("[GECROS Nitrogen Uptake]");
						out.println("");

						out.println("[GECROS Root System Formation]");
						out.println("");

					}
					else if (ceres) {
						out.println("[CERES]");
						out.println("[ceres]");
						out.println("filename = $<$PROJECT_PATH/$PROJECT_NAME_$REG_STR_crop_rotation.ini$>");
						out.println("[plant]");
						out.println("potential transpiration = CERES");
						out.println("actual transpiration = CERES");
						out.println("phenological development = CERES");
						out.println("canopy gross photosynthesis = CERES");
						out.println("biomass growth = CERES");
						out.println("canopy formation = CERES");
						out.println("root length growth = CERES");
						out.println("nitrogen demand = CERES");
						out.println("nitrogen uptake = CERES");
						out.println("crop senescence = CERES");
				}
					

					out.println("[Hansen et al. (DAISY_Miner)]");

					out.println("[daisy_miner]");
					out.println("ini_filename = $<$PROJECT_PATH/$PROJECT_NAME_$REG_STR_daisy_miner_nitrogen.ini$>");
					
					
					out.close();
				}
				ok = true;
			}
			
		}
		catch (Exception e) 
		{
			  e.printStackTrace();
		}
		return ok;
	}
	public boolean writeXn5GecrosParametersFile(String xn5FilePrefixGecros, int plantParamId, String crop_code, String variety, String crop_name)
	{
		boolean ok = false;
		try {
									
			String xn5FileNameGecros = xn5FilePrefixGecros + "__" + crop_name.toLowerCase() + "_"+ firstLetterToLowerCase(variety) + "_gecros.ini";
			
			
			String s = "SELECT *, variety as varietyName FROM plant_parameterization_gecros t1"
					+ " JOIN residue_partitioning t2 ON t1.crop_code = t2.crop_code "
					+ " WHERE plant_param_id = " + plantParamId
					+ " AND t1.crop_code =  '" + crop_code + "' AND variety = '" + variety + "'"
					+";";
			//System.out.println(s);
			ResultSet rs = myConnection.query(s);
			
			if (rs.first())
			{
				PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(xn5FileNameGecros)));
				out.println("[control]");
				out.println("option = 1");
				
				out.println("");
				out.println("[cropcode]");
				
						printSimpleIniField("variety", out, rs);
						out.println("# Oekotyp der Kulturart");

						printSimpleIniField("ECOTYPE", out, rs);
						out.println("# Typ der Tageslaenge");
						printSimpleIniField("DAYLENGTH", out, rs);
						//						DAYLENGTH = LDPs
						out.println("# Typ der Blattwinkelverteilung");
						printSimpleIniField("LEAFANGLE", out, rs);
						//LEAFANGLE = SPH
						out.println("");
						out.println("[croptype]");
						out.println("#LEGUME = +1 for leguminous crops; = -1 for non-leguminous crops");
						out.println("#C3C4 = +1 for C3 crops; = -1. for C4 crops");
						out.println("#DETER = +1 for determinate crops; = -1 for indeterminate crops");
						out.println("#SLP = +1 for short-day crops; = -1 for long-day crops");
						out.println("#LODGE = +1 for cases with lodging; = -1 for cases without lodging");
						out.println("#VERN = +1 for vernalisation; =-1 without vernalisation");

						printSimpleIniField("LEGUME", out, rs, true);
						printSimpleIniField("C3C4", out, rs, true);						
						printSimpleIniField("DETER", out, rs, true);
						printSimpleIniField("SLP", out, rs, true);
						printSimpleIniField("LODGE", out, rs, true);
						printSimpleIniField("VERN", out, rs, true);
						out.println("");
						out.println("[biomass]");
						//# 80002
						out.println("# growth efficiency of vegetative organs [g C /(g C)]");
						out.println("# carbon fraction in vegetative organs [g C /g]");
						out.println("# efficiency of germination (Par.) [-] crop  table 2, p46");
						printSimpleIniField("CFV", out, rs);
						printSimpleIniField("EG", out, rs);
						printSimpleIniField("YGV", out, rs);
						out.println("");
						out.println("# fat fraction in storage organ (Par.)   [g/g]    crop  table 2, p46");
						out.println("# lignin fraction in storage organ (Par.)   [g/g]    crop  table 2, p46");
						out.println("# organic acid fraction in storage organ (Par.)   [g/g]    crop  table 2, p46");
						out.println("# minerals fraction in storage organ (Par.)   [g/g]    crop  table 2, p46");

						printSimpleIniField("FFAT", out, rs);
						printSimpleIniField("FLIG", out, rs);
						printSimpleIniField("FOAC", out, rs);
						printSimpleIniField("FMIN", out, rs);
						out.println("");
						out.println("[morphology]");
						//# 80003
						out.println("#Leaf width [m] crop table 3, p47");
						out.println("#maximal root depth [cm] crop table 3, p47");
						out.println("#stem dry weight per unit of plant height [g /m^2 /m] crop  table 3, p47");
						
						printSimpleIniField("LWIDTH", out, rs);
						printSimpleIniField("RDMX", out, rs);
						printSimpleIniField("CDMHT", out, rs);
						out.println("");
				out.println("[phenology]");
//						# 80003
						out.println("# base temperature for phenology      [°C] crop  table 3, p47");
						out.println("# optimum temperature for phenology   [°C] crop  table 3, p47");
						out.println("# ceiling temperature for phenology   [°C] crop  table 3, p47");
						out.println("# curvature for temperature response [-] default table 4, p49");
						
						printSimpleIniField("TBD", out, rs);
						printSimpleIniField("TOD", out, rs);
						printSimpleIniField("TCD", out, rs);
						printSimpleIniField("TSEN", out, rs);
						out.println("");
						out.println("[nitrogen]");
//						# 80004
						out.println("# maximum crop nitrogen uptake [g N /m^2 /d] default table 4, p49");
						out.println("# min. N conc. in roots        [g N /g]     crop  table 3, p47");
						out.println("# min. N conc. in stems        [g N /g]     crop  table 3, p47");
						out.println("# min. specific leaf N content [g N /m^2]   crop  table 3, p47");
						out.println("# initial N conc. in living leaves [g N /g] crop  table 3, p47");
						out.println("# specific leaf area constant [m^2 leaf /g] crop  table 3, p47");
						out.println("# carbon cost of symbiotic nitrogen fixation [g C /g N] const table 1, p45");
						
						printSimpleIniField("NUPTX", out, rs);
						printSimpleIniField("RNCMIN", out, rs);
						printSimpleIniField("STEMNC", out, rs);
						printSimpleIniField("SLNMIN", out, rs);
						printSimpleIniField("LNCI", out, rs);
						printSimpleIniField("SLA0", out, rs);
						printSimpleIniField("CCFIX", out, rs);
						out.println("");
						out.println("[photosynthesis]");
						//# 80005
						out.println("# activation energy of JMAX [J/mol] crop  table 3, p47");
						out.println("# slope of lin.rel. btw. VCMAX and leaf N [umol /s /(g N)] crop specific ???");
						out.println("# slope of lin.rel. btw. VJMAX and leaf N [umol /s /(g N)] crop specific ???");
						out.println("# convexity for light response electron transport (J2) in photosynthesis [-]  const table 1, p45 (photo)");
						
						printSimpleIniField("EAJMAX", out, rs);
						printSimpleIniField("XVN", out, rs);
						printSimpleIniField("XJN", out, rs);
						printSimpleIniField("THETA", out, rs);
						out.println("");
						out.println("[genotype]");
						//# 80006
						out.println("# Seed weight [g /seed]");
						out.println("# Standard seed (storage organ) N concentration [g N /g]");
						out.println("# Leaf angle from horizontal [degree]");
						out.println("# Maximal crop height [m]");
						out.println("# Minimum thermal days for vegetative phase (d)");
						out.println("# Minimum thermal days for reproductive phase (d)");
						
						printSimpleIniField("SEEDW", out, rs);
						printSimpleIniField("SEEDNC", out, rs);
						printSimpleIniField("BLD", out, rs);
						printSimpleIniField("HTMX", out, rs);
						printSimpleIniField("MTDV", out, rs);
						printSimpleIniField("MTDR", out, rs);
						
						out.println("");
						out.println("[photoperiod]");
						//#Dev.stage start of photo-sensitive phase    (-)        deflt table 4, p49
						printSimpleIniField("SPSP", out, rs);
						//#Dev.stage end of photo-sensitive phase      (-)        deflt table 4, p49
						printSimpleIniField("EPSP", out, rs);
						//#Incl. of sun angle for photoper.daylgth.  (degree)     const table 1, p45
						printSimpleIniField("INSP", out, rs);
						printSimpleIniField("PSEN", out, rs);
						
						out.println("");
						out.println("[default]");
						//# 80007
						out.println("# Fraction of sigmoid curve inflexion in entire height growth period  [-] default table 4, p49");
						out.println("# Fraction of sigmoid curve inflexion in entire seed growth period    [-] default table 4, p49");
						out.println("# Dev.Stage of seed number determining period for indeterminate crops [-] default table 4, p49");
						out.println("# Critical root weight density [g /m^2 /(cm depth)]  const table 1, p45 (others)");
						
						printSimpleIniField("PMEH", out, rs);
						printSimpleIniField("PMES", out, rs);
						printSimpleIniField("ESDI", out, rs);
						printSimpleIniField("WRB", out, rs);
						
						out.println("");
						out.println("[sensitivity]");
						//# 80008
						out.println("# Ambient CO2 concentration [umol /mol]");
						out.println("# Coefficient of radiation [-]");
						out.println("# Coefficient of vapor pressure [-]");
						out.println("# Coefficient of temperature [°C]");
						
						printSimpleIniField("CO2A", out, rs);
						printSimpleIniField("COEFR", out, rs);
						printSimpleIniField("COEFV", out, rs);
						printSimpleIniField("COEFT", out, rs);

						out.println("# Initial C fraction in shoot [g C /(g C)]");
						out.println("# Initial N fraction in shoot [g N /(g N)]");
						
						printSimpleIniField("FCRSH", out, rs);
						printSimpleIniField("FNRSH", out, rs);

						out.println("# Seed N from non-structural N [-]");
						out.println("# Initial factor of N conc. of seed filling [-]");
						out.println("# Final factor of N conc. of seed filling   [-]");
						out.println("# Dev.Stage of fastest transition from initial to final factor [-]");
						
						printSimpleIniField("PNPRE", out, rs);
						printSimpleIniField("CB", out, rs);
						printSimpleIniField("CX", out, rs);
						printSimpleIniField("TM", out, rs);

						out.println("");
						out.println("[residue partition]");
						out.println("# Dev.Stage of fastest transition from initial to final factor [-]");
						printSimpleIniFieldWithSemicolon("VarietyName", out, rs);
						printSimpleIniFieldWithSemicolon("ResidueToAMO1_frac", out, rs);
						printSimpleIniFieldWithSemicolon("C_fromDeadleaf_frac", out, rs);
						printSimpleIniFieldWithSemicolon("N_fromDeadleaf_frac", out, rs);
						
						
				out.close();
				ok = true;
			}
			else
			{
				throw new Exception("Error in writeXn5GecrosParametersFile: Query returned empty: " + s );
			}
		}
		catch (Exception e) 
		{
			  e.printStackTrace();
			System.exit(0);
		}
		return ok;
	}
	
	public boolean writeXn5CropManagementFiles(String xn5FilePrefix, int projectID)
	{
		boolean ok = false;
		try {
			
			/*String s0 = "SELECT startYear, endYear, startMonth, startDay, endMonth, endDay, plotSize " 
						+ " FROM simulation_projects_general "
						+ " WHERE simulation_project_id = "+ projectID + ";";
			ResultSet projectInfo = myConnection.query(s0);	

			if (! projectInfo.first()) {
				throw new Exception("Error: Missing general information on simulation project.");
			}
			
			int startYear = projectInfo.getInt("startYear");
			int startMonth = projectInfo.getInt("startMonth");
			int startDay = projectInfo.getInt("startDay");
			int endYear = projectInfo.getInt("endYear");
			int endMonth = projectInfo.getInt("endMonth");
			int endDay = projectInfo.getInt("endDay");
			*/
			
			
			String s6 = "SELECT  xn5_cell_x, xn5_cell_y "
					+ " FROM simulation_projects_xn5_cells_management t1"
					
					+ "   WHERE simulation_project_id = "+ projectID +
					
					" GROUP BY xn5_cell_x, xn5_cell_y"
					+ " ORDER BY xn5_cell_x, xn5_cell_y";
	
			ResultSet cellList = myConnection.query(s6);
			
			
			
			String s1 = "SELECT  xn5_cell_x, xn5_cell_y, year, position, " 
							+ " t1.crop_management_id, t1.crop_code as CropCode, t1.variety,"
							+ " sow_depth, row_dist, sow_dens, sow_date, IF(emerg_date = -99, sow_date, emerg_date) AS emerg_date, harvest_date,"
							+ " IF(max_biom_date = -99, harvest_date, max_biom_date) AS max_biom_date, IF(max_ro_date = -99, harvest_date, max_ro_date) AS max_ro_date, max_root_depth AS max_root, biom_remove, t3.crop_name as CropName"
							+ ", sow_date_year, IFNULL(emerg_date_year, sow_date_year) AS emerg_date_year, harvest_date_year, IFNULL(max_biom_date_year, harvest_date_year) AS max_biom_date_year , IFNULL(max_ro_date_year, harvest_date_year) AS max_ro_date_year,  HTMX as max_plant_height "
							+ " FROM simulation_projects_xn5_cells_management t1"
							+ " JOIN crop_management_planting t2"
							+ "  ON t1.crop_management_id = t2.crop_management_id"
							+ "	   AND t1.crop_code = t2.crop_code"
							+ "    AND t1.variety = t2.variety "
						    + "  JOIN info_crops t3 On t1.crop_code = t3.crop_code "
						    + " JOIN simulation_projects_gecros_crops_included t4"
						    + "   ON t1.crop_code = t4.crop_code"
						    + " AND t1.variety = t4.variety "
							+ " AND t1.simulation_project_id =t4.simulation_project_id"
							+ " JOIN plant_parameterization_gecros t5 ON"
							+ " t1.crop_code = t5.crop_code"
						    + "  AND t1.variety = t5.variety"
						    + "   AND t4.plant_param_id = t5.plant_param_id"
							+ "   WHERE t1.simulation_project_id = "+ projectID +
							" ORDER BY xn5_cell_x, xn5_cell_y, year, position;";
			
			ResultSet managementList = myConnection.query(s1);
			
			String s2 = "SELECT  xn5_cell_x, xn5_cell_y, year, position, " 
					+ " t1.crop_management_id, t1.crop_code, t1.variety, "
					+ " event_id, date, code, fertilizer, n_tot_min, no3n, nh4n, urea, date_year"
					+ " FROM simulation_projects_xn5_cells_management t1"
					+ " JOIN crop_management_mineral_fertilization t2 "
					+ "	ON t1.crop_management_id = t2.crop_management_id "
					+ "  AND t1.crop_code = t2.crop_code "
				    + "   AND t1.variety = t2.variety "
				    + "  WHERE simulation_project_id = " 	+ projectID +
					" ORDER BY xn5_cell_x, xn5_cell_y, year, position;";
			
			ResultSet minFertList = myConnection.query(s2);
			
			String s3 = " SELECT  xn5_cell_x, xn5_cell_y, year, position," 
						+ " t1.crop_management_id, t1.crop_code, t1.variety,"
						+ " event_id, date, code, fertilizer, 1.0 as amount, dry_matter, org_subst, n_tot_org, nh4n, date_year"
						+ " FROM simulation_projects_xn5_cells_management t1"
						+ " JOIN crop_management_organic_fertilization t2 "
						+ "  ON t1.crop_management_id = t2.crop_management_id "
						+  "  AND t1.crop_code = t2.crop_code "
						+  "  AND t1.variety = t2.variety "
						+  "  WHERE simulation_project_id ="	+ projectID +
								" ORDER BY xn5_cell_x, xn5_cell_y, year, position;";
						
			ResultSet orgFertList = myConnection.query(s3);

			String s4 = "SELECT  xn5_cell_x, xn5_cell_y, year, position, " 
						+ " t1.crop_management_id, t1.crop_code, t1.variety, "
						+  " event_id, date, code, implement as fertilizer, amount, IFNULL(rate, -99) as rate, IFNULL(nh4n, -99) as nh4n, IFNULL(no3n, -99) as no3n , IFNULL(org_n, -99) as org_n, IFNULL(org_c, -99) as org_c, date_year "
						+  " FROM simulation_projects_xn5_cells_management t1 " 
						+	"	JOIN crop_management_irrigation t2 "
						+  " ON t1.crop_management_id = t2.crop_management_id "
						+  "  AND t1.crop_code = t2.crop_code "
						+  "  AND t1.variety = t2.variety "
						+  "  WHERE simulation_project_id = " +  projectID +"" +
								" ORDER BY xn5_cell_x, xn5_cell_y, year, position;";
			
			ResultSet irrigationList = myConnection.query(s4);

	
			String s5 = " SELECT xn5_cell_x, xn5_cell_y, year, position, " 
					    + " t1.crop_management_id, t1.crop_code, t1.variety, "
					    +  " event_id, date, depth, equipment as implement, code, date_year" 
					    + "	FROM simulation_projects_xn5_cells_management t1 "
					    + " JOIN crop_management_tillage t2 "
					    + " ON t1.crop_management_id = t2.crop_management_id "
					    +  " AND t1.crop_code = t2.crop_code "
					    +  " AND t1.variety = t2.variety "
					    +  " WHERE simulation_project_id = " +  projectID +"" +
						" ORDER BY xn5_cell_x, xn5_cell_y, year, position;";
			

			ResultSet tillageList = myConnection.query(s5);

			if(!managementList.first() )
			{
				throw new Exception("Error: no management for simulation project!");
			}
			
			boolean noTillage = ! tillageList.first();
			boolean noIrrigation = ! irrigationList.first();
			boolean noOrgFert = ! orgFertList.first();
			boolean noMinFert = ! minFertList.first();
			
			
			
			int curGrid = 0;
			int rn = 0;
			
			while (cellList.next())//move cursor to next value (including the first value in the first loop)
			{
				int curX = cellList.getInt("xn5_cell_x");
				int curY = cellList.getInt("xn5_cell_y");
				++rn;
				System.out.println("Writing plant management for " + curX + ","+curY);

				
				String xn5FileNameCropRotation = xn5FilePrefix + "_" + curGrid + "_" + curX + "_" + curY + "_0_crop_rotation.ini" ;
			
				PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(xn5FileNameCropRotation)));
				
				out.println("[plant_management]");					

				List<String> fieldList = Arrays.asList(		"CropCode","CropName","variety"
						 , "sow_depth", "row_dist", "sow_dens", "sow_date", "emerg_date", "harvest_date",
						  "max_biom_date", "max_ro_date", "max_root", "biom_remove", "max_plant_height"
						);

				printManagementsForCellToIniFile(fieldList, out, managementList, curX, curY);
				out.println("");
				
				
				
				out.close();


				String xn5FileNameFertilization = xn5FilePrefix + "_" + curGrid + "_" + curX + "_" + curY + "_0_fertilization.ini" ;
				
				PrintWriter outFert = new PrintWriter(new BufferedWriter(new FileWriter(xn5FileNameFertilization)));
				outFert.println("[mineral]");
				if(!noMinFert) {
					fieldList = Arrays.asList(		"date", "fertilizer", "code", "n_tot_min", "no3n", "nh4n", "urea");
					printManagementsForCellToIniFile(fieldList, outFert, minFertList, curX, curY);
				}
				outFert.println("");
				
				outFert.println("[organic]");
				if(!noOrgFert) {
					fieldList = Arrays.asList(		"date", "fertilizer", "code", "amount", "dry_matter", "nh4n", "org_subst", "n_tot_org");
					printManagementsForCellToIniFile(fieldList, outFert, orgFertList, curX, curY);
				}
				outFert.println("");
				


				outFert.close();
				
				String xn5FileNameTillage = xn5FilePrefix + "_" + curGrid + "_" + curX + "_" + curY + "_0_schaaf_manag.ini" ;
				
				PrintWriter outTillage = new PrintWriter(new BufferedWriter(new FileWriter(xn5FileNameTillage)));
				outTillage.println("[tillage]");					

				if (! noTillage) {
					fieldList = Arrays.asList(		"date", "implement", "code", "depth");
					printManagementsForCellToIniFile(fieldList, outTillage, tillageList, curX, curY);
				}
				outTillage.println("");		

				outTillage.println("[irrigation]");				
				if(!noIrrigation) {
					fieldList = Arrays.asList(		"date", "fertilizer", "code", "amount", "rate", "no3n", "nh4n", "org_c", "org_n");
					printManagementsForCellToIniFile(fieldList, outTillage, irrigationList, curX, curY);
					
				}
				outTillage.println("");
				outTillage.close();

			}
			
			ok = true;
		} 
		catch (Exception e) 
		{
			  e.printStackTrace();
			  //System.exit(0);
		}
		return ok;

	}
	public boolean writeXn5CellCfgFiles(String xn5FilePrefix, int projectID)
	{
		boolean ok = false;
		try {
			
			String s0 = "SELECT startYear, endYear, startMonth, startDay, endMonth, endDay, plotSize " 
						+ " FROM simulation_projects_general "
						+ " WHERE simulation_project_id = "+ projectID + ";";
			ResultSet projectInfo = myConnection.query(s0);	

			if (! projectInfo.first()) {
				throw new Exception("Error: Missing general information on simulation project.");
			}
			
			int startYear = projectInfo.getInt("startYear");
			int startMonth = projectInfo.getInt("startMonth");
			int startDay = projectInfo.getInt("startDay");
			int endYear = projectInfo.getInt("endYear");
			int endMonth = projectInfo.getInt("endMonth");
			int endDay = projectInfo.getInt("endDay");
			
			double plotSize = projectInfo.getDouble("plotSize");
			
			String s1 = "SELECT xn5_cell_x, xn5_cell_y, t1.profileID, "
						+ "lat, lon, alt, exposition, inclination, AveYearTemp, MonthTempAmp" 
							+ ", SUM(layers) as layer_count, MAX(depth_per_layer) as layer_thickness "
							+" FROM simulation_projects_xn5_cells t1"
							+ " JOIN soil_parameterization t2 " 
							+ " ON t1.profileID = t2.profileID "
                            + " AND t1.soil_param_id = t2.soil_param_id "
								+" WHERE simulation_project_id = " + projectID
								+" GROUP BY xn5_cell_x, xn5_cell_y "
								+" ORDER BY xn5_cell_x, xn5_cell_y;";
			
			
			ResultSet cellList = myConnection.query(s1);	
			
			String s2 = "SELECT xn5_cell_x, xn5_cell_y, t2.`horizon_id`,    `t2`.`horizon_name`,    `t2`.`depth_per_layer`,"
						+ " `t2`.`first_layer`,    `t2`.`layers`,    `t2`.`clay`,    `t2`.`silt`,    `t2`.`sand`,    `t2`.`organic_matter`,"
						+ " `t2`.`bulk_density`,    `t2`.`rock_fraction`,    `t2`.`ph`,    `t2`.`soil_type`,    `t2`.`wilting_point`,"
						+ " `t2`.`field_capacity`,    `t2`.`porosity`,    `t2`.`cond_sat`,    `t2`.`res_water_cont`,    `t2`.`cont_sat`,"
						+ " `t2`.`camp_a`,    `t2`.`camp_b`,    `t2`.`van_gen_a`,    `t2`.`van_gen_n`,    `t2`.`van_gen_m`" 
						+ "	 FROM simulation_projects_xn5_cells t1	 "
						+ " JOIN soil_parameterization t2	ON t1.profileID = t2.profileID	AND t1.soil_param_id = t2.soil_param_id "
						+ "	WHERE simulation_project_id =   " + projectID
						+ " ORDER BY xn5_cell_x, xn5_cell_y, first_layer;";
			
			ResultSet soilParam = myConnection.query(s2);	

			String s5 = "SELECT xn5_cell_x, xn5_cell_y, " +
					" effic, humf, min_cn, temp0, miner_q10, theta0, theta1, MinerSatActiv, NitrifNO3NH4Ratio," +
					" iTempCorr, AOM1Q10 as CAOM1Q10, AOM2Q10 as CAOM2Q10, BOM1Q10 as CBOM1Q10, BOM2Q10 as CBOM2Q10, SOM1Q10 as CSOM1Q10,"
					+ "SOM2Q10 as CSOM2Q10, DBOM1Q10, DBOM2Q10, MBOM1Q10, MBOM2Q10,	"
					+ "fBOM1, fSOM1, fSOM2, fEFF, fEFFAOM1 as fEff_AOM1, fEFFAOM2 as fEff_AOM2,fEFFBOM1 as fEff_BOM1, fEFFBOM2 as fEff_BOM2, fEFFSOM1 as fEff_SOM1,	fEFFSOM2 as fEff_SOM2 "
					+ "	 FROM simulation_projects_xn5_cells t1	 "
					+ " JOIN daisy_parameterization t2	ON t1.profileID = t2.profileID	" +
					"		AND t1.daisy_param_id = t2.daisy_param_id "
					+ "	WHERE simulation_project_id =   " + projectID
					+ " ORDER BY xn5_cell_x, xn5_cell_y;";
		
			ResultSet daisyParam = myConnection.query(s5);	
			
			String s6 = "SELECT xn5_cell_x, xn5_cell_y, t1.profileID, first_layer, "    
					+ " layers, fom_slow, fom_fast, fom_veryfast, micbioms_slow, micbioms_fast, humus_slow, humus_fast"
					+ " FROM simulation_projects_xn5_cells t1"
                    + "     JOIN daisy_parameterization_layers t3"
                    + "     	ON t1.profileID = t3.profileID"
                    + "         AND t1.daisy_param_id = t3.daisy_param_id"
					+ "	  	 WHERE simulation_project_id = " + projectID
						+ "	 ORDER BY xn5_cell_x, xn5_cell_y, first_layer;";

			ResultSet daisyParamLayers = myConnection.query(s6);
		
			String s3 = "SELECT xn5_cell_x, xn5_cell_y, t1.profileID, first_layer, "    
						+ " layers, AOM1_C, AOM2_C, AOM3_C,  BOM1_C,"
						+ " BOM2_C, BOMD_C, SOM0_C, SOM1_C, SOM2_C, Csol,"
						+ " AOM1_N, AOM2_N, AOM3_N, BOM1_N, BOM2_N, BOMD_N,SOM0_N, SOM1_N, SOM2_N"
						+ " FROM simulation_projects_xn5_cells t1"
                        + "     JOIN sompools_initialization t3"
                        + "     	ON t1.profileID = t3.profileID"
                        + "         AND t1.sompools_param_id = t3.sompools_param_id"
						+ "	  	 WHERE simulation_project_id = " + projectID
							+ "	 ORDER BY xn5_cell_x, xn5_cell_y, first_layer;";
			
			ResultSet daisyStart = myConnection.query(s3);
			
			
			String s4 = "SELECT xn5_cell_x, xn5_cell_y, t1.profileID, t2.first_layer,"    
					+ " t2.layers, "
					+ " IF(water_content >= porosity, 0.97* porosity, water_content) AS water_content, matrix_potential, soil_temperature, nh4_content, no3_content, root_density"
					+ " FROM simulation_projects_xn5_cells t1"
                    + "     JOIN soil_initialization t2"
                    + "     	ON t1.profileID = t2.profileID"
                    + "         AND t1.soilinit_param_id = t2.soilinit_param_id"
                    + "     JOIN soil_parameterization t3 "
                    +  " 		ON t1.profileID = t3.profileID	AND t1.soil_param_id = t3.soil_param_id "
                    +  "			AND t2.first_layer = t3.first_layer"			
					+ "	  	 WHERE simulation_project_id = " + projectID
						+ "	 ORDER BY xn5_cell_x, xn5_cell_y, first_layer;";
		
			ResultSet soilStart = myConnection.query(s4);
			
			String s7 = "SELECT xn5_cell_x, xn5_cell_y, t1.profileID, first_layer,"    
					+ " layers, c_litter, n_litter, c_manure, n_manure, c_humus, n_humus "					
					+ " FROM simulation_projects_xn5_cells t1"
                    + "     JOIN soil_initialization t3"
                    + "     	ON t1.profileID = t3.profileID"
                    + "         AND t1.soilinit_param_id = t3.soilinit_param_id"
					+ "	  	 WHERE simulation_project_id = " + projectID
						+ "	 ORDER BY xn5_cell_x, xn5_cell_y, first_layer;";
		
			ResultSet soilStart2 = myConnection.query(s7);
			
			
			String s8 = "SELECT xn5_cell_x, xn5_cell_y, " +
					" t2.effic, t2.humf, t2.min_cn, t2.temp0, t2.miner_q10, t2.theta0, t2.MinerSatActiv, t2.NitrifNO3NH4Ratio," +
					" t3. `leachn_param_id`, t3.`fn2Fraction`, t3.`fn2oeduction`, t3.`irewet`, t3.`ino3kin` "
					+ "	 FROM simulation_projects_xn5_cells t1	 "
					+ " JOIN daisy_parameterization t2	ON t1.profileID = t2.profileID	" +
					"		AND t1.daisy_param_id = t2.daisy_param_id "
					+ " JOIN leachn_parameterization t3	ON t1.leachn_param_id = t3.leachn_param_id	" 
					+ "	WHERE simulation_project_id =   " + projectID
					+ " ORDER BY xn5_cell_x, xn5_cell_y;";
		
			ResultSet leachnParam = myConnection.query(s8);	
			
			String s9 = "SELECT xn5_cell_x, xn5_cell_y, t3.leachn_param_id, first_layer, layers, "  
					+ " urea_hydrolysis , nitrification, denitrification, mineralisation_lit , mineralisation_man,  mineralisation_hum "	
					+ " FROM simulation_projects_xn5_cells t1"
                    + "     JOIN leachn_parameterization_layers t3"
                    + "     	ON t1.leachn_param_id = t3.leachn_param_id	"
					+ "	  	 WHERE simulation_project_id = " + projectID
						+ "	 ORDER BY xn5_cell_x, xn5_cell_y, first_layer;";

			ResultSet leachnParamLayersTransf = myConnection.query(s9);
			
			
			String s10 = "SELECT xn5_cell_x, xn5_cell_y, t3.leachn_param_id, first_layer, layers,nh4_to_n20 "  
					+ " FROM simulation_projects_xn5_cells t1"
                    + "     JOIN leachn_parameterization_layers t3"
                    + "     	ON t1.leachn_param_id = t3.leachn_param_id	"
					+ "	  	 WHERE simulation_project_id = " + projectID
						+ "	 ORDER BY xn5_cell_x, xn5_cell_y, first_layer;";

			ResultSet leachnParamLayersNitrif = myConnection.query(s10);
			
			String s11 = "SELECT xn5_cell_x, xn5_cell_y, t3.leachn_param_id, first_layer, layers, "  
					+ "			ksno3, ksc, theta0, biogrowth, bio_mc"
					+ " FROM simulation_projects_xn5_cells t1"
                    + "     JOIN leachn_parameterization_layers t3"
                    + "     	ON t1.leachn_param_id = t3.leachn_param_id	"
					+ "	  	 WHERE simulation_project_id = " + projectID
						+ "	 ORDER BY xn5_cell_x, xn5_cell_y, first_layer;";

			ResultSet leachnParamLayersDenitrif = myConnection.query(s11);
			
			String s12 = "SELECT xn5_cell_x, xn5_cell_y, t3.leachn_param_id, first_layer, layers, "  
					+"n2o_n2, freezing, thawing, rewet" 

					+ " FROM simulation_projects_xn5_cells t1"
                    + "     JOIN leachn_parameterization_layers t3"
                    + "     	ON t1.leachn_param_id = t3.leachn_param_id	"
					+ "	  	 WHERE simulation_project_id = " + projectID
						+ "	 ORDER BY xn5_cell_x, xn5_cell_y, first_layer;";

			ResultSet leachnParamLayersDenitrifEvents = myConnection.query(s12);
	
		
			
			/*if (cellList)
			{
				throw new Exception("Error in writeXn5CellCfgFiles: Empty list of cells. Query: " + s1 );
			}*/
			
			
			
			int curGrid = 0;
			int rn = 0;
			
			if (! soilParam.first() ) {
				throw new Exception("Error: Missing soil parameterization for simulation project.");
			}
			if (! daisyStart.first() ) {
				throw new Exception("Error: Missing SOM pools initialization for simulation project.");
			}
			if (! soilStart.first() ) {
				throw new Exception("Error: Missing soil initialization for simulation project.");
			}
			if (! soilStart2.first() ) {
				throw new Exception("Error: Missing soil initialization for simulation project.");
			}
			if (! daisyParam.first() ) {
				throw new Exception("Error: Missing DAISY parameterization for simulation project.");
			}
			if (! daisyParamLayers.first() ) {
				throw new Exception("Error: Missing DAISY layered parameterization for simulation project.");
			}
			if (! leachnParam.first() ) {
				throw new Exception("Error: Missing LEACHN parameterization for simulation project.");
			}
			if (! leachnParamLayersTransf.first() ) {
				throw new Exception("Error: Missing LEACHN layered parameterization for simulation project.");
			}
			if (! leachnParamLayersNitrif.first() ) {
				throw new Exception("Error: Missing LEACHN layered parameterization for simulation project.");
			}
			if (! leachnParamLayersDenitrif.first() ) {
				throw new Exception("Error: Missing LEACHN layered parameterization for simulation project.");
			}
			if (! leachnParamLayersDenitrifEvents.first() ) {
				throw new Exception("Error: Missing LEACHN layered parameterization for simulation project.");
			}
			
			while (cellList.next())//move cursor to next value (including the first value in the first loop)
			{
				int curX = cellList.getInt("xn5_cell_x");
				int curY = cellList.getInt("xn5_cell_y");
				++rn;
				
				String xn5FileNameCfg = xn5FilePrefix + "_" + curGrid + "_" + curX + "_" + curY + "_0_cfg.ini" ;
				String xn5FileNameDaisy = xn5FilePrefix + "_" + curGrid + "_" + curX + "_" + curY + "_0_daisy_miner_nitrogen.ini" ;
				String xn5FileNameLeachn = xn5FilePrefix + "_" + curGrid + "_" + curX + "_" + curY + "_0_leachn.ini" ;

				PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(xn5FileNameCfg)));
				
				
				out.println("[simulation]");					
				out.println("start="+startYear+"-"+ String.format("%02d", startMonth)+"-"+String.format("%02d", startDay));
				out.println("end="+endYear+"-"+String.format("%02d", endMonth)+"-"+String.format("%02d", endDay));
				out.println("");					

				out.println("[location]");					
				printNextRowInColToIniFile("lat", out, cellList);
				printNextRowInColToIniFile("lon", out, cellList);
				printNextRowInColToIniFile("alt", out, cellList);
				printNextRowInColToIniFile("exposition", out, cellList);
				printNextRowInColToIniFile("inclination", out, cellList);
				out.println("size = "+plotSize);
				out.println("plot_number = "+ rn);				
				out.println("plot_name = Cell " + curX + ", " + curY);				
				out.println("sub_plot_number = 1");				
				out.println("sub_plot_name = Subplot 1");				
				
				out.println("sub_plot_size = "+plotSize);
				out.println("area_number = 111");
				out.println("wind_measure_height=2.0");
				out.println("temp_measure_height=2.0");
				out.println("");					


				out.println("[climate]");	
				printNextRowInColToIniFile("AveYearTemp", out, cellList);
				printNextRowInColToIniFile("MonthTempAmp", out, cellList);
				out.println("");	
				
				out.println("[preceding_crop]");
				out.println("crop_name = -99");
				out.println("harvest_date = -99");
				out.println("yield = -99");
				out.println("res_removal = -99");
				out.println("above_residual = -99");
				out.println("root_residual = -99");
				out.println("above_CN_residual = -99");
				out.println("root_CN_residual = -99");
				out.println("");	
				
				out.println("[soil]");	
				printNextRowInColToIniFile("layer_count", out, cellList);
				int numLayers = cellList.getInt("layer_count");
				printNextRowInColToIniFile("layer_thickness", out, cellList);
				
				List<String> fieldList = Arrays.asList("layers", "clay", "silt", "sand", "organic_matter", "bulk_density", "rock_fraction","ph",
														"soil_type",  "wilting_point","field_capacity", "porosity","cond_sat","res_water_cont","cont_sat"
														,"camp_a","camp_b","van_gen_a","van_gen_n"		
														);
				
				printLayersForCellToIniFile(fieldList, out, soilParam, curX, curY);
				out.println("");
				out.println("[start values]");

				fieldList = Arrays.asList("layers",  "water_content", "matrix_potential", "soil_temperature", "nh4_content", "no3_content", "root_density"	
						);
				printLayersForCellToIniFile(fieldList, out, soilStart, curX, curY);

				/*N2O, N2*/
				out.println("");

				out.println("[farm]");
				out.println("name = BEMS model");
				out.println("number = 1");
				out.println("last_name = FOR1695");
				out.println("first_name = Universität Hohenheim");
				out.println("street = Wollgrasweg 43");
				out.println("post_code = 70599");
				out.println("city = Stuttgart");
				out.println("phone = 0711 459 23637");					
				out.println("fax = v1.0");
				out.println("mobile = 0711 459 23637");
				out.println("email = christian.troost@uni-hohenheim.de");

				out.close();
		//.daisy_miner file
				PrintWriter outDaisy = new PrintWriter(new BufferedWriter(new FileWriter(xn5FileNameDaisy)));
				
				outDaisy.println("[mineralisation]");
				//old 20001
				outDaisy.println("layers = " + numLayers);
				printNextRowInColToIniFile("effic", outDaisy, daisyParam);
				printNextRowInColToIniFile("humf", outDaisy, daisyParam);
				printNextRowInColToIniFile("min_cn", outDaisy, daisyParam);
				printNextRowInColToIniFile("temp0", outDaisy, daisyParam);
				printNextRowInColToIniFile("miner_q10", outDaisy, daisyParam);
				printNextRowInColToIniFile("theta0", outDaisy, daisyParam);
				printNextRowInColToIniFile("MinerSatActiv", outDaisy, daisyParam);
				printNextRowInColToIniFile("NitrifNO3NH4Ratio", outDaisy, daisyParam);
				outDaisy.println("");

				//old 20021
				//######## TEMPERATURE PARAMETERS OF DAISY DECOMPOSITION RATES (by Scott Demyan et al.)###################
				//iTempCorr- default: = 0
				//iTempCorr- exponential: 1 
				//iTempCorr- Arrhenius type: 2
				printNextRowInColToIniFile("iTempCorr", outDaisy, daisyParam);
				printNextRowInColToIniFile("CAOM1Q10", outDaisy, daisyParam);
				printNextRowInColToIniFile("CAOM2Q10", outDaisy, daisyParam);
				printNextRowInColToIniFile("CBOM1Q10", outDaisy, daisyParam);
				printNextRowInColToIniFile("CBOM2Q10", outDaisy, daisyParam);
				printNextRowInColToIniFile("CSOM1Q10", outDaisy, daisyParam);
				printNextRowInColToIniFile("CSOM2Q10", outDaisy, daisyParam);
				printNextRowInColToIniFile("DBOM1Q10", outDaisy, daisyParam);
				printNextRowInColToIniFile("DBOM2Q10", outDaisy, daisyParam);
				printNextRowInColToIniFile("MBOM1Q10", outDaisy, daisyParam);
				printNextRowInColToIniFile("MBOM2Q10", outDaisy, daisyParam);
				outDaisy.println("");
				//old 20022
				printNextRowInColToIniFile("fBOM1", outDaisy, daisyParam);
				printNextRowInColToIniFile("fSOM1", outDaisy, daisyParam);
				printNextRowInColToIniFile("fSOM2", outDaisy, daisyParam);
				printNextRowInColToIniFile("fEFF", outDaisy, daisyParam);
				outDaisy.println("");
				//old 20023
				printNextRowInColToIniFile("fEff_AOM1", outDaisy, daisyParam);
				printNextRowInColToIniFile("fEff_AOM2", outDaisy, daisyParam);
				printNextRowInColToIniFile("fEff_BOM1", outDaisy, daisyParam);
				printNextRowInColToIniFile("fEff_BOM2", outDaisy, daisyParam);
				printNextRowInColToIniFile("fEff_SOM1", outDaisy, daisyParam);
				printNextRowInColToIniFile("fEff_SOM2", outDaisy, daisyParam);
				outDaisy.println("");
				
				//old 20007
				outDaisy.println("[transformation daisy]");
				List<String> daisyFieldList = Arrays.asList("layers", "fom_slow", "fom_fast", "fom_veryfast", "micbioms_slow", "micbioms_fast", "humus_slow", "humus_fast"
						);
				printLayersForCellToIniFile(daisyFieldList, outDaisy, daisyParamLayers, curX, curY);
				outDaisy.println("");
				
				//old 20008/20009
				outDaisy.println("[start values daisy]");								
				daisyFieldList = Arrays.asList("layers", "AOM1_C", "AOM2_C", "AOM3_C",  "BOM1_C",
						"BOM2_C", "BOMD_C", "SOM0_C", "SOM1_C", "SOM2_C", "Csol",
								"AOM1_N", "AOM2_N", "AOM3_N", "BOM1_N", "BOM2_N", "BOMD_N","SOM0_N", 
								"SOM1_N", "SOM2_N"
						);
				printLayersForCellToIniFile(daisyFieldList, outDaisy, daisyStart, curX, curY);

				//old 20003
				outDaisy.println("[start values general]");
				daisyFieldList = Arrays.asList("layers", "c_litter", "n_litter", "c_manure", "n_manure", "c_humus", "n_humus"
						);
				printLayersForCellToIniFile(daisyFieldList, outDaisy, soilStart2, curX, curY);
				
				outDaisy.close();
				
				//leachn.ini
				PrintWriter outLeachn = new PrintWriter(new BufferedWriter(new FileWriter(xn5FileNameLeachn)));
				
				outLeachn.println("[mineralisation]");
				//old 20001
				outLeachn.println("layers = " + numLayers);
				outLeachn.println("");
				printNextRowInColToIniFile("effic", outLeachn, leachnParam);
				printNextRowInColToIniFile("humf", outLeachn, leachnParam);
				printNextRowInColToIniFile("min_cn", outLeachn, leachnParam);
				printNextRowInColToIniFile("temp0", outLeachn, leachnParam);
				printNextRowInColToIniFile("miner_q10", outLeachn, leachnParam);
				printNextRowInColToIniFile("theta0", outLeachn, leachnParam);
				printNextRowInColToIniFile("MinerSatActiv", outLeachn, leachnParam);
				printNextRowInColToIniFile("NitrifNO3NH4Ratio", outLeachn, leachnParam);
				outLeachn.println("");
				
				
				outLeachn.println("[transformation]");
				List<String> leachnFieldList = Arrays.asList("layers", 
						"urea_hydrolysis" , "nitrification", "denitrification",
						"mineralisation_lit" , "mineralisation_man",  "mineralisation_hum" 
						);
				printLayersForCellToIniFile(leachnFieldList, outLeachn, leachnParamLayersTransf, curX, curY);
				outLeachn.println("");
				
				outLeachn.println("[nitrification]");
				leachnFieldList = Arrays.asList("layers", "nh4_to_n20"
						);
				printLayersForCellToIniFile(leachnFieldList, outLeachn, leachnParamLayersNitrif, curX, curY);
				outLeachn.println("");
				
				outLeachn.println("[denitrification]");
				printNextRowInColToIniFile("fn2Fraction", outLeachn, leachnParam);
				printNextRowInColToIniFile("fn2oeduction", outLeachn, leachnParam);
				printNextRowInColToIniFile("irewet", outLeachn, leachnParam);
				printNextRowInColToIniFile("ino3kin", outLeachn, leachnParam);
				outLeachn.println("");
				
				leachnFieldList = Arrays.asList("layers", "ksno3", "ksc", "theta0", "biogrowth", "bio_mc"
						);
				printLayersForCellToIniFile(leachnFieldList, outLeachn, leachnParamLayersDenitrif, curX, curY);
				outLeachn.println("");

				outLeachn.println("[denitrification events]");
				leachnFieldList = Arrays.asList("layers", 
						"n2o_n2", "freezing", "thawing", "rewet" 
						);
				printLayersForCellToIniFile(leachnFieldList, outLeachn, leachnParamLayersDenitrifEvents, curX, curY);
				outLeachn.println("");
				
				
				outLeachn.close();
				
			}
			ok = true;
		} 
		catch (Exception e) 
		{
			  e.printStackTrace();
			  //System.exit(0);
		}
		return ok;

	}
	void printSimpleIniField (String ColumnName, PrintWriter out, ResultSet rs) throws SQLException {
		String outstring = ColumnName + " = ";
		outstring += rs.getString(ColumnName) ;
		out.println(outstring);
	}
	void printSimpleIniFieldWithSemicolon (String ColumnName, PrintWriter out, ResultSet rs) throws SQLException {
		String outstring = ColumnName + " = ";
		outstring += rs.getString(ColumnName) ;
		out.println(outstring + ";");
	}
	void printSimpleIniField (String ColumnName, PrintWriter out, ResultSet rs, boolean addPlus) throws SQLException {
		String outstring = ColumnName + " = ";
		if (addPlus)
		{
			int val = rs.getInt(ColumnName);
			if (val > 0)
				outstring += "+" + rs.getString(ColumnName) ;
			else
				outstring += rs.getString(ColumnName) ;	
		}
		else {
			outstring += rs.getString(ColumnName) ;
		}
		out.println(outstring);
	}
	boolean printColumnToIniFile(String ColumnName, PrintWriter out, ResultSet rs)
	{
		return printColumnToIniFile(ColumnName, out, rs, false);
	}
	boolean printColumnToIniFile(String ColumnName, PrintWriter out, ResultSet rs, boolean addPlus)
	{
		boolean ok = false;
		try {
			String outstring = ColumnName + " = ";
			rs.beforeFirst();
			while (rs.next())
			{
				if (addPlus)
				{
					int val = rs.getInt(ColumnName);
					if (val > 0)
						outstring += "+" + rs.getString(ColumnName) + ";";
					else
						outstring += rs.getString(ColumnName) + ";";	
				}
				else
				{	
					outstring += rs.getString(ColumnName) + ";";
				}
			}
			out.println(outstring);
			ok = true;
		}
		catch (Exception e) 
		{
			  e.printStackTrace();
			//System.exit(0);
		}
		return ok;
	}
	boolean printNextRowInColToIniFile(String ColumnName, PrintWriter out, ResultSet rs)
	{
		return printNextRowInColToIniFile(ColumnName, out, rs, false);
	}
	boolean printNextRowInColToIniFile(String ColumnName, PrintWriter out, ResultSet rs, boolean addPlus)
	{
		boolean ok = false;
		try {
			String outstring = ColumnName + " = ";

			if (addPlus)
			{
				int val = rs.getInt(ColumnName);
				if (val > 0)
					outstring += "+" + rs.getString(ColumnName);
				else
					outstring += rs.getString(ColumnName) ;	
			}
			else
			{	
				outstring += rs.getString(ColumnName) ;
			}
			
			out.println(outstring);
			ok = true;
		}
		catch (Exception e) 
		{
			  e.printStackTrace();
			//System.exit(0);
		}
		return ok;
	}
	boolean printLayersForCellToIniFile(List<String> fieldList, PrintWriter out, ResultSet rs, int curX, int curY)
	{
		boolean ok = false;
		try {
			List<String> fieldContents = new ArrayList<String>();
			for (int i = 0; i < fieldList.size(); ++i)
			{
				fieldContents.add(fieldList.get(i) + " = " );
			}
			
			while(!rs.isAfterLast() && rs.getInt("xn5_cell_x") == curX && rs.getInt("xn5_cell_y") == curY ) { 
				for (int i = 0; i < fieldList.size(); ++i)
				{
					fieldContents.set(i, fieldContents.get(i)+" "+ rs.getString(fieldList.get(i)) + ";" );
				}
				if(!rs.next())
					break;
			}
			for (int i = 0; i < fieldList.size(); ++i)
			{
				out.println(fieldContents.get(i));
			}
	
			ok = true;
		}
		catch (Exception e) 
		{
			  e.printStackTrace();
			//System.exit(0);
		}
		return ok;
	}
	boolean printManagementsForCellToIniFile(List<String> fieldList, PrintWriter out, ResultSet rs, int curX, int curY)
	{
		boolean ok = false;
		try {
			List<String> fieldContents = new ArrayList<String>();
			for (int i = 0; i < fieldList.size(); ++i)
			{
				fieldContents.add(fieldList.get(i) + " = " );
			}
			int atleastone = 0;
			while(! rs.isAfterLast() &&  rs.getInt("xn5_cell_x") == curX && rs.getInt("xn5_cell_y") == curY ) { 
				for (int i = 0; i < fieldList.size(); ++i)
				{
					if ( fieldList.get(i).matches(".*date.*") )
					{
						if (rs.getString(fieldList.get(i)).equals("-99") || rs.getString(fieldList.get(i)).equals("-99.0") )
						{
							fieldContents.set(i, fieldContents.get(i) +" " + "-99" + ";" );
						}
						else {
							int year = rs.getInt(fieldList.get(i)+"_year") + rs.getInt("year") ;
							String temp = year +"-"+ rs.getString(fieldList.get(i));
							fieldContents.set(i, fieldContents.get(i) + " " + temp + ";" );
						}
					}
					else 
					{
						fieldContents.set(i,  fieldContents.get(i) + " " + rs.getString(fieldList.get(i)) + ";" );
					}
					atleastone++;
				}
				if(!rs.next())
					break;
			}
			if (atleastone > 0)
			{ for (int i = 0; i < fieldList.size(); ++i)
				{
					out.println(fieldContents.get(i));
				}
			}
			ok = true;
		}
		catch (Exception e) 
		{
			  e.printStackTrace();
			//System.exit(0);
		}
		return ok;
	}
	
	
	
	//SIMULATION PROJECTS
	public ResultSet getListOfSimulationProjects () {
		try {
			String s = "SELECT simulation_project_id, simulation_project_code, simulation_project_description, t1.author_id, author_first_name, author_surname" +
					" FROM info_simulation_projects t1 JOIN info_authors t2 on t1.author_id = t2.author_id "
					+ " ORDER BY simulation_project_id";
			ResultSet rs = myConnection.query(s);
			
			return rs;
		}
		catch (Exception e) 
		{
			  e.printStackTrace();
			  return null;
		}
	}
	public ResultSet getSimulationProjectInfo (int id) {
		try {
			String s = "SELECT simulation_project_id, simulation_project_code, simulation_project_description, t1.author_id, author_first_name, author_surname" +
					" FROM info_simulation_projects t1 JOIN info_authors t2 on t1.author_id = t2.author_id "
					+ " WHERE simulation_project_id =" + id +";";
			ResultSet rs = myConnection.query(s);
			
			return rs;
		}
		catch (Exception e) 
		{
			  e.printStackTrace();
			  return null;
		}
	}
	public int addSimulationProject (String code, String description, String author) {
		try {
			
			String s = "SELECT simulation_project_id " +
					" FROM info_simulation_projects t1 WHERE simulation_project_code = '" + code +"';";
			ResultSet rs = myConnection.query(s);			
			if(rs.first())
			{
				return -2; //code already exists
			}
			int id = 0;
			s ="SELECT max(simulation_project_id) as maxId " +
					" FROM info_simulation_projects t1;";
			rs = myConnection.query(s);
			
			if ( rs.first() )
			{
				id = rs.getInt("maxId") + 1;
			}
			
			if(!myConnection.updateDb("START TRANSACTION;")) {
				return -1;
			}
			
			s = "INSERT INTO info_simulation_projects VALUES ( " + id + ", '" + code 
					+ "', '" + description + "', '" + author + "');";
			if(! myConnection.updateDb(s) ) {
				myConnection.updateDb("ROLLBACK;");
				return -1;
			}

			s = "INSERT INTO simulation_projects_general VALUES ( " + id + ", 2009,2011,8,1,8,1,1);";
			if(! myConnection.updateDb(s) ) {
				myConnection.updateDb("ROLLBACK;");
				return -1;
			}

			if(! myConnection.updateDb("COMMIT;") ) {
				myConnection.updateDb("ROLLBACK;");
				return -1;
			}
			
			return id;
		}
		catch (Exception e) 
		{
			  e.printStackTrace();
			  return -1;
		}
		
	}
	public boolean copyProjectSettings(int fromId, int toId) {
	
			String s = "REPLACE INTO simulation_projects_gecros_crops_included " +
					" SELECT " + toId + ", plant_param_id, crop_code, variety, include FROM simulation_projects_gecros_crops_included WHERE simulation_project_id = " + fromId + ";";
			if(!  myConnection.updateDb(s)) {
				return false;
			}
			s= "REPLACE INTO simulation_projects_general " +
			" SELECT " + toId + ", startYear, endYear, startMonth, startDay, endMonth, endDay, plotSize FROM simulation_projects_general WHERE simulation_project_id = " + fromId + ";";
			
			if(!  myConnection.updateDb(s)) {
				return false;
			}
			s = "REPLACE INTO simulation_projects_xn5_cells " +
					" SELECT " + toId + ", " + "`xn5_cell_x`, `xn5_cell_y`,"
					+"`profileID`, `soil_param_id`,`daisy_param_id`,`sompools_param_id`,"
					+"`soilinit_param_id`,`lat`,	`lon`,	`alt`,`exposition`, `inclination`,	`AveYearTemp`,"
					+"`MonthTempAmp`, leachn_param_id, climate_file " 
					+" FROM simulation_projects_xn5_cells WHERE simulation_project_id = " + fromId + ";";
			
			if(!  myConnection.updateDb(s)) {
				return false;
			}
			s = "REPLACE INTO simulation_projects_xn5_cells_management " +
					" SELECT " + toId + ", " + "`xn5_cell_x`, `xn5_cell_y`,"
					+"`year`, `position`,`crop_management_id`,`crop_code`,"
					+"`variety`"
					+" FROM simulation_projects_xn5_cells_management " +
					"  WHERE simulation_project_id = " + fromId + ";";
			if(!  myConnection.updateDb(s)) {
				return false;
			}
			s = "REPLACE INTO simulation_projects_xpn " +
					" SELECT " + toId + ", " + "xpnText"
					+" FROM simulation_projects_xpn " +
					"  WHERE simulation_project_id = " + fromId + ";";
			if(!  myConnection.updateDb(s)) {
				return false;
			}
			s = "REPLACE INTO simulation_projects_xpi " +
					" SELECT " + toId + ", grid, xpiText"
					+" FROM simulation_projects_xpi " +
					"  WHERE simulation_project_id = " + fromId + ";";
			if(!  myConnection.updateDb(s)) {
				return false;
			}
			return true;
		
	}
	//Soil parameterizations
	public ResultSet getListOfDaisyParameterizations () {
		String s = "SELECT daisy_param_name FROM info_daisy_parameterizations;";
		return  myConnection.query(s);	
	}
	public int getDaisyParamIdForDaisyParamName (String daisy_param_name) {
		String s = "SELECT daisy_param_id FROM info_daisy_parameterizations WHERE daisy_param_name = '"+ daisy_param_name +"';";
		try {
			ResultSet rs =  myConnection.query(s);
			if (!rs.first() )
				return -1;
			else
				return rs.getInt("daisy_param_id");
		}
		catch( Exception e)
		{
			e.printStackTrace();
			return -1;
		}
	}
	public int addDaisyParameterization (String code, String description, String author) {
		try {
			
			String s = "SELECT daisy_param_id " +
					" FROM info_daisy_parameterizations t1 WHERE daisy_param_name = '" + code +"';";
			ResultSet rs = myConnection.query(s);			
			if(rs.first())
			{
				return -2; //code already exists
			}
			int id = 0;
			s ="SELECT max(daisy_param_id) as maxId " +
					" FROM info_daisy_parameterizations t1;";
			rs = myConnection.query(s);
			
			if ( rs.first() )
			{
				id = rs.getInt("maxId") + 1;
			}
			
			s = "INSERT INTO info_daisy_parameterizations VALUES ( " + id + ", '" + author
					+ "', '" + code   + "', '" + description + "');";
			boolean rc = myConnection.updateDb(s);
			if (!rc) 
				return -1;
			else
				return id;
		}
		catch (Exception e) 
		{
			  e.printStackTrace();
			  return -1;
		}
		
	}	
	
	public enum idTypes {
		daisyParam, daisyPools, soilInit, soilParam, management, gecros
	}
	
	public ResultSet getListOfIdCodes ( idTypes which ) {
		
		String name, table;
		switch(which) {
			case daisyParam:
				name = "daisy_param_name";
				table = "info_daisy_parameterizations";
				break;
			case daisyPools:
				name = "som_param_name";
				table = "info_sompools_initializations";
				break;		
			case soilInit: 
				name = "soilinit_param_name";
				table = "info_soil_initializations";
				break;
			case soilParam:
				name = "soil_param_name";
				table = "info_soil_parameterizations";
				break;
			case management:
				name = "crop_management_name";
				table = "info_crop_managements";
				break;
			case gecros:
				name = "plant_param_name";
				table = "info_plant_parameterizations";
				break;
			default:
				return null;
		}
		
		String s = "SELECT "+ name + " FROM "+ table +";";
		return  myConnection.query(s);	
	}
	public int getNumericIdForIdCode (idTypes which , String valueName) {
		
		String id, name, table;
		switch(which) {
			case daisyParam:
				id = "daisy_param_id";
				name = "daisy_param_name";
				table = "info_daisy_parameterizations";
				break;
			case daisyPools:
				id = "sompools_param_id";
				name = "som_param_name";
				table = "info_sompools_initializations";
				break;		
			case soilInit: 
				id = "soilinit_param_id";
				name = "soilinit_param_name";
				table = "info_soil_initializations";
				break;
			case soilParam:
				id = "soil_param_id";
				name = "soil_param_name";
				table = "info_soil_parameterizations";
				break;
			case management:
				id = "crop_management_id";
				name = "crop_management_name";
				table = "info_crop_managements";
				break;
			case gecros:
				id = "plant_param_id";
				name = "plant_param_name";
				table = "info_plant_parameterizations";
				break;
			default:
				return -1;
		}
		
		String s = "SELECT "+id+" FROM " + table+ " WHERE "+name+ " = '"+ valueName +"';";
		try {
			ResultSet rs =  myConnection.query(s);
			if (!rs.first() )
				return -1;
			else
				return rs.getInt(id);
		}
		catch( Exception e)
		{
			e.printStackTrace();
			return -1;
		}
	}
	public int addIdCode (idTypes which, String code, String description, String author) {
		try {
			String id, name, table;
			switch(which) {
				case daisyParam:
					id = "daisy_param_id";
					name = "daisy_param_name";
					table = "info_daisy_parameterizations";
					break;
				case daisyPools:
					id = "sompools_param_id";
					name = "som_param_name";
					table = "info_sompools_initializations";
					break;		
				case soilInit: 
					id = "soilinit_param_id";
					name = "soilinit_param_name";
					table = "info_soil_initializations";
					break;
				case soilParam:
					id = "soil_param_id";
					name = "soil_param_name";
					table = "info_soil_parameterizations";
					break;
				case management:
					id = "crop_management_id";
					name = "crop_management_name";
					table = "info_crop_managements";
					break;
				case gecros:
					id = "plant_param_id";
					name = "plant_param_name";
					table = "info_plant_parameterizations";
					break;
				default:
					return -1;
			}
			String s = "SELECT "+id+ 
					" FROM "+table+ " t1 WHERE "+name+" = '" + code +"';";
			ResultSet rs = myConnection.query(s);			
			if(rs.first())
			{
				return -2; //code already exists
			}
			int valueId = 0;
			s ="SELECT max("+id+") as maxId " +
					" FROM "+table+" t1;";
			rs = myConnection.query(s);
			
			if ( rs.first() )
			{
				valueId = rs.getInt("maxId") + 1;
			}
			
			s = "INSERT INTO "+table+" VALUES ( " + valueId + ", '" + author
					+ "', '" + code   + "', '" + description + "');";
			boolean rc = myConnection.updateDb(s);
			if (!rc) 
				return -1;
			else
				return valueId;
		}
		catch (Exception e) 
		{
			  e.printStackTrace();
			  return -1;
		}
		
	}	
	//PLANT PARAMETERIZATIONS
	public ResultSet getListOfPlantParameterizations () {
			String s = "SELECT plant_param_name FROM info_plant_parameterizations;";
			return  myConnection.query(s);	
	}
	public int getPlantParamIdForPlantParamName (String plant_param_name) {
			String s = "SELECT plant_param_id FROM info_plant_parameterizations WHERE plant_param_name = '"+ plant_param_name +"';";
			try {
				ResultSet rs =  myConnection.query(s);
				if (!rs.first() )
					return -1;
				else
					return rs.getInt("plant_param_id");
			}
			catch( Exception e)
			{
				e.printStackTrace();
				return -1;
			}
	}
	public int addPlantParameterization (String code, String description, String author) {
		try {
			
			String s = "SELECT plant_param_id " +
					" FROM info_plant_parameterizations t1 WHERE plant_param_name = '" + code +"';";
			ResultSet rs = myConnection.query(s);			
			if(rs.first())
			{
				return -2; //code already exists
			}
			int id = 0;
			s ="SELECT max(plant_param_id) as maxId " +
					" FROM info_plant_parameterizations t1;";
			rs = myConnection.query(s);
			
			if ( rs.first() )
			{
				id = rs.getInt("maxId") + 1;
			}
			
			s = "INSERT INTO info_plant_parameterizations VALUES ( " + id + ", '" + author
					+ "', '" + code   + "', '" + description + "');";
			boolean rc = myConnection.updateDb(s);
			if (!rc) 
				return -1;
			else
				return id;
		}
		catch (Exception e) 
		{
			  e.printStackTrace();
			  return -1;
		}
		
	}
	
	//AUTHORS
	public int addAuthor (String author_id, String first_name, String surname) {
		try {
			
			String s = "SELECT author_id " +
					" FROM info_authors t1 WHERE author_id = '" + author_id +"';";
			ResultSet rs = myConnection.query(s);			
			if(rs.first())
			{
				return -2; //code already exists
			}

			
			s = "INSERT INTO info_authors VALUES ( '" + author_id + "', '" + first_name 
					+ "', '" + surname + "');";
			boolean rc = myConnection.updateDb(s);
			if (!rc) 
				return -1;
			else
				return 0;
		}
		catch (Exception e) 
		{
			  e.printStackTrace();
			  return -1;
		}
		
	}
	public ResultSet getListOfAuthors () {
		String s = "SELECT author_id FROM info_authors;";
		return  myConnection.query(s);	
	}
	
	public ResultSet getGecrosParameterizations () {
		String s = "SELECT * FROM plant_parameterization_gecros" ;
		return  myConnection.query(s);	
	}
	//PROJECT GENERAL INFO
	public ResultSet getGeneralInfoForProject( int projectId ) {
		String s = "SELECT startDay, startMonth, startYear, endDay, endMonth, endYear, plotSize" +
				" FROM simulation_projects_general WHERE simulation_project_id = " + projectId + ";";
				
		return myConnection.query(s);
	
	}
	public boolean updateGeneralInfoForProject( int projectId,
			String startYear, String endYear , 
			String startMonth, String startDay, 
			String endMonth, String endDay,
			String plotSize ) {
		String s = "REPLACE INTO simulation_projects_general " +
				"VALUES ("+ projectId+", "+ startYear +", "+endYear+","+startMonth+","+startDay+","
				+endMonth+","+endDay+","+plotSize+");";	
		return myConnection.updateDb(s);
	}
	
	//GECROS selection
	public ResultSet getGecrosParameterizationSelection (int simprojectID) {
		String s =
			" SELECT IFNULL(t3.include,0) AS selected, t1.crop_code, t1.variety, t2.plant_param_name, t1.plant_param_id  "
			+" FROM plant_parameterization_gecros t1"
			+" JOIN info_plant_parameterizations t2 ON t1.plant_param_id = t2.plant_param_id"
			+" LEFT JOIN simulation_projects_gecros_crops_included t3 "
			+" ON t1.crop_code = t3.crop_code"
			+" AND t1.variety = t3.variety"
			+" AND t1.plant_param_id = t3.plant_param_id"
			+" AND t3.simulation_project_id = " + simprojectID 
			+" ORDER BY t1.crop_code, t1.variety, t1.plant_param_id";
		return  myConnection.query(s);	
	}
	public String getGecrosParameterizationSelectionString (int simprojectID) {
		String s =
			" SELECT IFNULL(t3.include,0) AS selected, t1.crop_code, t1.variety, t2.plant_param_name, t1.plant_param_id  "
			+" FROM plant_parameterization_gecros t1"
			+" JOIN info_plant_parameterizations t2 ON t1.plant_param_id = t2.plant_param_id"
			+" LEFT JOIN simulation_projects_gecros_crops_included t3 "
			+" ON t1.crop_code = t3.crop_code"
			+" AND t1.variety = t3.variety"
			+" AND t1.plant_param_id = t3.plant_param_id"
			+" AND t3.simulation_project_id = " + simprojectID 
			+" ORDER BY t1.crop_code, t1.variety, t1.plant_param_id";
		return  s;	
	}
	public ResultSet getGecrosParameterizationSelectionOnly (int simprojectID) {
		String s =
			" SELECT  t1.crop_code, t1.variety, t2.plant_param_id, t4.crop_name  "
			+" FROM plant_parameterization_gecros t1"
			+" JOIN info_plant_parameterizations t2 ON t1.plant_param_id = t2.plant_param_id"
			+" JOIN simulation_projects_gecros_crops_included t3 "
			+" ON t1.crop_code = t3.crop_code AND t3.include = 1"
			+" AND t1.variety = t3.variety"
			+" AND t1.plant_param_id = t3.plant_param_id"
			+" AND t3.simulation_project_id = " + simprojectID 
			+" JOIN info_crops t4 ON t1.crop_code = t4.crop_code "
			+" ORDER BY t1.crop_code, t1.variety, t1.plant_param_id";
		return  myConnection.query(s);	
	}
	public boolean updateSelectedGecrosPlantsForProject(int project_id,  int plant_param_id, String crop_code
				, String variety, int selected) {
		String s = "REPLACE INTO simulation_projects_gecros_crops_included " +
				"  VALUES ("+project_id+", "+plant_param_id+", '"+crop_code+"', '"+ variety+"', "+selected+");";
		return myConnection.updateDb(s);
	}
	
	//CELLS
	public ResultSet getSoilInfoForProject(int id) {
		String s = "SELECT  `xn5_cell_x`, `xn5_cell_y`, `profileID`, `soil_param_id`, `daisy_param_id`, `sompools_param_id`,"
					+ " `soilinit_param_id`, `lat`,`lon`, `alt`, `exposition`, `inclination`, `AveYearTemp`, `MonthTempAmp`, leachn_param_id, climate_file"
					+ " FROM `simulation_projects_xn5_cells`"
					+ " WHERE simulation_project_id = "+ id +";";
		return  myConnection.query(s);
	}
	public boolean addCellForProject(int project_id, int xn5_cell_x, int xn5_cell_y, String profileID, int soil_param_id,
				int daisy_param_id, int sompools_param_id, int soilinit_param_id, double lat, double lon, double alt, 
				String exposition, double inclination, double AveYearTemp, double MonthTempAmp, int leachn_param_id, String climate_file  ){
		String s = "INSERT INTO `simulation_projects_xn5_cells`" +
				"	   (simulation_project_id, `xn5_cell_x`, `xn5_cell_y`, `profileID`, `soil_param_id`, `daisy_param_id`, `sompools_param_id`,"
					+ " `soilinit_param_id`, `lat`,`lon`, `alt`, `exposition`, `inclination`, `AveYearTemp`, `MonthTempAmp`, leachn_param_id, climate_file)"
					+ " VALUES ("+project_id+","+xn5_cell_x+","+xn5_cell_y+",'"+profileID+"',"+soil_param_id+","+daisy_param_id+","+sompools_param_id+","+
							+ soilinit_param_id+","+lat+","+lon+","+alt+",'"+exposition+"',"+inclination+","+AveYearTemp+","+MonthTempAmp+","+leachn_param_id+",'"+climate_file+"'"
					+");";
		return  myConnection.updateDb(s);
	}
	public boolean updateCellForProject(int project_id, int xn5_cell_x, int xn5_cell_y, String profileID, int soil_param_id,
			int daisy_param_id, int sompools_param_id, int soilinit_param_id, double lat, double lon, double alt, 
			String exposition, double inclination, double AveYearTemp, double MonthTempAmp, int leachn_param_id, String climate_file ){
			String s = "REPLACE INTO `simulation_projects_xn5_cells`" +
			"	   (simulation_project_id, `xn5_cell_x`, `xn5_cell_y`, `profileID`, `soil_param_id`, `daisy_param_id`, `sompools_param_id`,"
				+ " `soilinit_param_id`, `lat`,`lon`, `alt`, `exposition`, `inclination`, `AveYearTemp`, `MonthTempAmp`, leachn_param_id, climate_file)"
				+ " VALUES ("+project_id+","+xn5_cell_x+","+xn5_cell_y+", '"+profileID+"',"+soil_param_id+","+daisy_param_id+","+sompools_param_id+","+
						+ soilinit_param_id+","+lat+","+lon+","+alt+",'"+exposition+"',"+inclination+","+AveYearTemp+","+MonthTempAmp+","+leachn_param_id+",'"+climate_file+"'"
				+");";
		return  myConnection.updateDb(s);
	}
	public boolean addCell(int project_id, int xn5_cell_x, int xn5_cell_y) {
		String s = "INSERT INTO `simulation_projects_xn5_cells`" +
		"	   SELECT "+project_id+", "+xn5_cell_x+", "+xn5_cell_y+", `profileID`, `soil_param_id`, `daisy_param_id`, `sompools_param_id`,"
			+ " `soilinit_param_id`, `lat`,`lon`, `alt`, `exposition`, `inclination`, `AveYearTemp`, `MonthTempAmp`, leachn_param_id, climate_file"
			+ " FROM simulation_projects_xn5_cells WHERE simulation_project_id = " + project_id + " ORDER BY `xn5_cell_x` DESC, `xn5_cell_y` DESC LIMIT 1"
			+ ";";
		return  myConnection.updateDb(s);
	}
	public boolean deleteCell(int project_id, int xn5_cell_x, int xn5_cell_y) {
		String s = "DELETE FROM  `simulation_projects_xn5_cells_management`" +
		"	    WHERE simulation_project_id = " + project_id + " AND `xn5_cell_x` = " + xn5_cell_x+ " AND  `xn5_cell_y` = "+xn5_cell_y
			+ ";";
		if (!myConnection.updateDb(s)) {
			return false;
		}
		String s2 = "DELETE FROM  `simulation_projects_xn5_cells`" +
		"	    WHERE simulation_project_id = " + project_id + " AND `xn5_cell_x` = " + xn5_cell_x+ " AND  `xn5_cell_y` = "+xn5_cell_y
			+ ";";
		return  myConnection.updateDb(s2);
	}

	
	public ResultSet getManagementInfoForProject(int id) {
		String s = "SELECT  `xn5_cell_x`, `xn5_cell_y`, `year`, `position`, `crop_management_id`, `crop_code`,"
				+ " `variety`"
				+ " FROM `simulation_projects_xn5_cells_management`"
				+ " WHERE simulation_project_id = "+ id +";";
		return  myConnection.query(s);
	}
	
	
	public boolean addManagementForProject(int project_id, int xn5_cell_x, int xn5_cell_y, int year, int position, int crop_management_id, String crop_code, String variety){
	String s = "INSERT INTO `simulation_projects_xn5_cells_management`" +
			"	   (simulation_project_id, `xn5_cell_x`, `xn5_cell_y`, `year`, `position`, `crop_management_id`, `crop_code`,"
				+ " `variety`)"
				+ " VALUES ("+project_id+","+xn5_cell_x+","+xn5_cell_y+", "+year+", "+position+", "+crop_management_id +", '"+crop_code+"', '"+variety+"'"
				+");";
		return  myConnection.updateDb(s);
	}
	public boolean updateManagementForProject(int project_id, int xn5_cell_x, int xn5_cell_y,  int year, int position, int crop_management_id, String crop_code, String variety){
		String s = "REPLACE INTO `simulation_projects_xn5_cells_management`" +
			"	   (simulation_project_id, `xn5_cell_x`, `xn5_cell_y`, `year`, `position`, `crop_management_id`, `crop_code`,"
				+ " `variety`)"
				+ " VALUES ("+project_id+","+xn5_cell_x+","+xn5_cell_y+", "+year+", "+position+", "+crop_management_id +", '"+crop_code+"', '"+variety+"'"
				+");";
		return  myConnection.updateDb(s);
	}
	public boolean addManagementRow(int project_id, int xn5_cell_x, int xn5_cell_y, int year, int position){
	String s = "INSERT INTO `simulation_projects_xn5_cells_management`" +
			"	  SELECT "+project_id+","+xn5_cell_x+","+xn5_cell_y+", "+year+", "+position+", `crop_management_id`, `crop_code`,"
				+ " `variety` " +
					" FROM  `simulation_projects_xn5_cells_management`" +
					" WHERE simulation_project_id = "+project_id+  
					"		ORDER BY xn5_cell_x DESC, xn5_cell_y DESC, year DESC, position DESC LIMIT 1"
				+";";
		return  myConnection.updateDb(s);
	}
	public boolean deleteManagementRow(int project_id, int xn5_cell_x, int xn5_cell_y, int year, int position) {
		String s = "DELETE FROM  `simulation_projects_xn5_cells_management`" +
		"	    WHERE simulation_project_id = " + project_id + " AND `xn5_cell_x` = " + xn5_cell_x+ " AND  `xn5_cell_y` = "+xn5_cell_y
				+ " AND year = "+year+ " AND position = " + position 
			+ ";";
		
		return  myConnection.updateDb(s);
	}
	public ResultSet getManagementsForCrop(String crop_code, String variety) {
		String s = "SELECT  `crop_management_id`, `crop_management_code`"
				+ " FROM `crop_management_planting` t1"
				+ " JOIN info_crop_managements t2 ON t1.cropManagement_id = t2.crop_management_id"
				+ " WHERE crop_code = '"+ crop_code +"' AND variety = '"+variety+"';";
		return  myConnection.query(s);
	}
	public ResultSet getVarietiesForCrop(String crop_code, int simprojectID) {
		String s = "SELECT  DISTINCT `variety`"
						+" FROM plant_parameterization_gecros t1"
						+" JOIN info_plant_parameterizations t2 ON t1.plant_param_id = t2.plant_param_id"
						+" JOIN simulation_projects_gecros_crops_included t3 "
						+" ON t1.crop_code = t3.crop_code AND t3.include = 1"
						+" AND t1.plant_param_id = t3.plant_param_id"
						+" AND t3.simulation_project_id = " + simprojectID 
						+" ;";
		return  myConnection.query(s);
	}	
	
	public ResultSet getXpnContentForProject(int simProjectId) {
		String s = "SELECT xpnText FROM " +
				"	simulation_projects_xpn "
				+ " WHERE simulation_project_id = " + simProjectId +";";
		
		return  myConnection.query(s);
	}
	public boolean setXpnContentForProject(int simProjectId, String text) {
		String s = "REPLACE INTO " +
				"	simulation_projects_xpn "
				+ " VALUES(  " + simProjectId
				+ " , '" + text + "');";
		
		return  myConnection.updateDb(s);
	}	
	public boolean copyXpnContentForProjectFromProject(int toProjectId, int fromProjectId) {
		String s = "REPLACE INTO " +
				"	simulation_projects_xpn "
				+ " ( simulation_project_id, xpnText ) " 
				+ " SELECT " + toProjectId + ",  xpnText  FROM simulation_projects_xpn WHERE simulation_projects_id = " 
				+ fromProjectId + ";";
				
		return  myConnection.updateDb(s);
	}
	

	public ResultSet getXpiContentForProject(int simProjectId, int gridId) {
		String s = "SELECT xpiText FROM " +
				"	simulation_projects_xpi "
				+ " WHERE simulation_project_id = " + simProjectId 
				+ " AND grid = "+ gridId
				+";";
		
		return  myConnection.query(s);
	}
	public boolean setXpiContentForProject(int simProjectId, int gridId, String text) {
		String s = "REPLACE INTO " +
				"	simulation_projects_xpi "
				+ " VALUES(  " + simProjectId + ", " + gridId
				+ " , '" + text + "');";
		
		return  myConnection.updateDb(s);
	}	
	public boolean copyXpiContentForProjectFromProject(int toProjectId, int fromProjectId, int gridId) {
		String s = "REPLACE INTO " +
				"	simulation_projects_xpi "
				+ " ( simulation_project_id, grid, xpiText ) " 
				+ " SELECT " + toProjectId + ",  grid, xpiText  FROM simulation_projects_xpi WHERE simulation_projects_id = " 
				+ fromProjectId + " AND grid = "+ gridId + ";";
				
		return  myConnection.updateDb(s);
	}
	
	//UTILITY FUNCTIONS
	public static boolean isNumeric(String str)
	{
	  return str.matches("-?\\d+(\\.\\d+)?");  
	}
	public Connection getConnectionObject() {
		return myConnection.getConnectionObject();
	}
}




class cropInfo {
	public String crop_code;
	public String variety;
	public int sowYear;
	
	
	public cropInfo(String _code, String _variety, int _y) {
		crop_code = _code;
		variety = _variety;
		sowYear = _y;
	}
}

